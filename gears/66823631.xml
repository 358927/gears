<Item class="Model" referent="RBX6AF8A44F1E174B0DB149F0242ACD25CB">
			<Properties>
				<BinaryString name="AttributesSerialize" />
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<token name="LevelOfDetail">0</token>
				<CoordinateFrame name="ModelMeshCFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
				<Vector3 name="ModelMeshSize">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="ModelStreamingMode">0</token>
				<string name="Name">66823631</string>
				<bool name="NeedsPivotMigration">false</bool>
				<Ref name="PrimaryPart">null</Ref>
				<float name="ScaleFactor">1</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags" />
				<OptionalCoordinateFrame name="WorldPivotData" />
			</Properties>
			<Item class="Tool" referent="RBX8CF6DBE173E34A11AA5384BAF66D7299">
				<Properties>
					<BinaryString name="AttributesSerialize" />
					<bool name="CanBeDropped">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="Enabled">true</bool>
					<CoordinateFrame name="Grip">
						<X>-2</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>0</R00>
						<R01>1</R01>
						<R02>-0</R02>
						<R10>-1</R10>
						<R11>0</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<token name="LevelOfDetail">0</token>
					<bool name="ManualActivationOnly">false</bool>
					<CoordinateFrame name="ModelMeshCFrame">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<Vector3 name="ModelMeshSize">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="ModelStreamingMode">0</token>
					<string name="Name">ChristmasKatana</string>
					<bool name="NeedsPivotMigration">false</bool>
					<Ref name="PrimaryPart">null</Ref>
					<bool name="RequiresHandle">true</bool>
					<float name="ScaleFactor">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags" />
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=66703643</url></Content>
					<string name="ToolTip" />
					<OptionalCoordinateFrame name="WorldPivotData">
						<CFrame>
							<X>-0.233470112</X>
							<Y>48.7395287</Y>
							<Z>-4.25897408</Z>
							<R00>-0.115181141</R00>
							<R01>0.8782565</R01>
							<R02>0.464110851</R02>
							<R10>-0.933347106</R10>
							<R11>-0.2556023</R11>
							<R12>0.252052933</R12>
							<R20>0.339994997</R20>
							<R21>-0.404144764</R21>
							<R22>0.849158883</R22>
						</CFrame>
					</OptionalCoordinateFrame>
				</Properties>
				<Item class="LocalScript" referent="RBXE72B10867FC24DF2BF4359BC6E16930C">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">ChristmasKatana_MainScript</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{7D633937-9748-4D86-B31D-9E253F0C0A43}</string>
						<ProtectedString name="Source">--local mDebugId = game.Workspace.DebugId.Value
--game.Workspace.DebugId.Value = game.Workspace.DebugId.Value+1
--print("Running swordscript &lt;"..mDebugId.."&gt;")

-------------------------------------
-- Makes an RBX::Lua Instance using
-- a table of key-value pairs to
-- initialize it. Values with numeric
-- keys will be parented to the object
-- and other values will be set
-- as members of the object.
function Create(ty)
	return function(data)
		local obj = Instance.new(ty)
		for k, v in pairs(data) do
			if type(k) == 'number' then
				v.Parent = obj
			else
				obj[k] = v
			end
		end
		return obj
	end
end

---------------------------------------
-- Same as Make, but modifies an existing
-- object rather than creating ones.
function Modify(obj, data)
	for k, v in pairs(data) do
		if type(data) == 'number' then
			data.Parent = obj
		else
			data[k] = v
		end
	end
	return obj
end

-----------------------------------------
-- Creates a class which can be instantiated
-- using `CreateCLASSNAME( ... )`.
---usage:
--class'MyClass'(function(this, arg1)
--	this.ClassMember = value
--	function this.ClassMethod(...) ... end
--end, function(def)
--	def.StaticMember = value
--	 function def.StaticMethod(...) ... end
--end)
--local obj = CreateMyClass(arg1)
------------------------------------------
local function class(name)
	local def = {}
	getfenv(0)[name] = def
	return function(ctor, static)
		local nctor = function(...)
			local this = {}
			if ctor then
				ctor(this, ...)
			end
			return this
		end
		getfenv(0)['Create'..name] = nctor
		if static then static(def) end
	end
end


---------------------------------------------
-- Signal class for custom-made events
--API:
-- Signal:connect(callback)
-- Signal:fire(...)
-- Signal:wait()
---------------------------------------------
class'Signal'(function(this)
	local mListeners = {}
	local mWaitObject = Create'BoolValue'{}

	function this:connect(func)
		local connection = {}
		function connection:disconnect()
			mListeners[func] = nil
		end
		mListeners[func] = connection
		return connection
	end

	function this:fire(...)
		--print("Fire evt&lt;"..tostring(this).."&gt; from script&lt;"..mDebugId.."&gt;")
		for func, conn in pairs(mListeners) do
			--print("-&gt; "..tostring(func).."( ... )")
			func(...)
		end
		mWaitObject.Value = not mWaitObject.Value
	end

	function this:wait()
		mWaitObject.Changed:wait()
	end
end)


--------------------------------------------------
-- Bin class for cleaning up assets
--API:
-- Bin:add(func: Function, ident: String)
-- Bin:clean(ident: String)
-- Bin:cleanAll()
--------------------------------------------------
class'Bin'(function(this)
	local mGarbage = {}

	function this:add(func, ident)
		ident = ident or '__unnamed'
		if not mGarbage[ident] then
			mGarbage[ident] = {}
		end
		mGarbage[ident][#mGarbage[ident]+1] = func
	end

	function this:clean(ident)
		local listToCall = mGarbage[ident]
		if listToCall then
			for _, func in pairs(listToCall) do
				func()
			end
			mGarbage[ident] = nil
		end
	end

	function this:cleanAll()
		for ident, list in pairs(mGarbage) do
			for _, func in pairs(list) do
				func()
			end
			mGarbage[ident] = nil
		end
	end
end)


-----------------------------------------------------
-- AnimationProvider class for easy loading of
-- animation assets into animationtracks once
-- a humanoid is available.
--API:
-- AnimationProvider:registerAnimation(ident, assetid)
-- AnimationProvider:setHumanoid(humanoid)
-- AnimationProvider:setTool(tool)
-- AnimationProvider:getAnimation(ident)
-----------------------------------------------------
class'AnimationProvider'(function(this)
	local mAnimations = {--[[ident =&gt; {AnimationId, CurrentTrack, CurrentAnim} ]]}
	local mCurrentHumanoid = nil

	function this:registerAnimation(ident, assetid)
		--check for an existing copy of the anim
		local existingAnim = Tool.Tool:FindFirstChild('ANIM_'..ident)

		--make the data for this anim
		local animdat = {
			AnimationId = assetid,
			CurrentAnim = existingAnim or Create'Animation'{
				Name = "ANIM_"..ident,
				AnimationId = assetid,
			},
		}
		mAnimations[ident] = animdat

		--if there's a current tool, put it in there
		if Tool.Tool then
			Tool.HUGE_EQUIP_HACK = true
			animdat.CurrentAnim.Parent = Tool.Tool
			Tool.HUGE_EQUIP_HACK = false
		end

		--if there's a humanoid load the animation track
		if mCurrentHumanoid then
			animdat.CurrentTrack = mCurrentHumanoid:LoadAnimation(animdat.CurrentAnim)
		end
	end

	function this:setHumanoid(humanoid)
		mCurrentHumanoid = humanoid
		for _, anim in pairs(mAnimations) do
			anim.CurrentTrack = humanoid:LoadAnimation(anim.CurrentAnim)
		end
	end

	function this:getAnimation(ident)
		local dat = mAnimations[ident]
		if not dat then error("Gear Fatal Error: Animation `"..ident.."` not found") end
		if not dat.CurrentTrack then
			error("Gear Fatal Error: No Humanoid for animation `"..ident.."` to run in")
		end
		return dat.CurrentTrack
	end
end)


----------------------------------------------
-- SoundProvider class
-- functions similarily to the animationprovider
----------------------------------------------
class'SoundProvider'(function(this)
	local mSounds = {}

	function this:registerSound(ident, assetid, inpart)
		inpart = inpart or Tool.Tool:FindFirstChild('Handle')
		if not inpart then
			repeat
				inpart = Tool.Tool.ChildAdded:wait()
			until inpart.Name == 'Handle'
		end
		local existingSound = inpart:FindFirstChild('SOUND_'..ident)
		local sounddat = {
			SoundId = assetid,
			CurrentSound = existingSound or Create'Sound'{
				Name = 'SOUND_'..ident,
				SoundId = assetid,
				Parent = inpart,
			},
		}
		mSounds[ident] = sounddat
	end

	function this:getSound(ident)
		local dat = mSounds[ident]
		if dat then
			return dat.CurrentSound
		end
	end
end)


----------------------------------------------
-- DebounceProvider class -- Prevent events
-- from happening in too rapid succession
----------------------------------------------
class'DebounceProvider'(function(this)
	local mFlagNameToLastTime = {}

	function this:test(ident, delta)
		local t = tick()
		local lastTime = mFlagNameToLastTime[ident] or 0
		if delta then
			return (t-lastTime) &gt; delta
		else
			return mFlagNameToLastTime[ident]
		end
	end
	function this:set(ident, state)
		if state then
			mFlagNameToLastTime[ident] = state
		elseif state == false then
			mFlagNameToLastTime[ident] = false
		else
			mFlagNameToLastTime[ident] = tick()
		end
	end
end)


function TagHumanoid(humanoid)
	if Tool.Player then
		local tag = Create'ObjectValue'{
			Name = "creator",
			Value = Tool.Player,
			Parent = humanoid,
		}
		Tool.Bin:add(function()
			tag:Remove()
		end, 'HumanoidTag')
	end
end
function UntagHumanoid()
	Tool.Bin:clean('HumanoidTag')
end


------- wait for any event in a set of events  to fire ------
function WaitForAny(tb)
	local evt = tb
	local conn = {}
	local eventargs = nil
	local waitProxy = Create'BoolValue'{}
	for _, e in pairs(evt) do
		local c = e:connect(function(...)
			for _, c in pairs(conn) do
				c:disconnect()
			end
			eventargs = {...}
			waitProxy.Value = not waitProxy.Value
		end)
		conn[#conn+1] = c
	end
	--
	waitProxy.Changed:wait()
	--
	return unpack(eventargs)
end


----------------------------------------------
-- Tool singleton class
--API:
-- ...
class'Tool'(nil, function(this)
	--need this here for the animationprovider to use
	this.HUGE_EQUIP_HACK = false

	this.Bin = CreateBin()
	this.AnimationProvider = CreateAnimationProvider()
	this.DebounceProvider = CreateDebounceProvider()
	this.SoundProvider = CreateSoundProvider()

	--general values
	this.Tool = script.Parent
	this.Player = nil
	this.Humanoid = nil
	this.Character = nil

	--============ several flags for the gear
	--nothing

	--some events
	this.Equipped = CreateSignal()
	this.Unequipped = CreateSignal()
	this.OwnerChange = CreateSignal()

	--mouse utility events
	this.MouseClick = CreateSignal()
	this.MouseDoubleClick = CreateSignal()
	this.DoubleClickThreshold = 0.2

	local mLastClickTime = 0

	script.Parent.Equipped:connect(function(mouse)
		--print("Internal Equipped: Time b: "..time())
		--set up general values in the tool
		this.Mouse = mouse
		local curOwner = game.Players:GetPlayerFromCharacter(script.Parent.Parent)
		if curOwner ~= this.Player then
			this.Player = curOwner
			this.OwnerChange:fire(this.Player)
		end
		this.Character = this.Player.Character
		this.Humanoid = this.Character.Humanoid
		this.AnimationProvider:setHumanoid(this.Humanoid)

		--set up the mouse events
		mouse.Button1Down:connect(function()
			local t = tick()
			if (t-mLastClickTime) &lt; this.DoubleClickThreshold then
				--prvent multiple double-clicks in a row
				mLastClickTime = 0
				this.MouseDoubleClick:fire(mouse)
			else
				mLastClickTime = t
				this.MouseClick:fire(mouse)
			end
		end)

		--done setup, call the equipped function
		if this.HUGE_EQUIP_HACK then
			--the HUGE_EQUIP_HACK flags tells the tool that the equip is a synchronous
			--call as a result of parenting an animation to the character, which happens
			--when the tool is picked up from the workspace, but not during normal equips
			--(Why does this happen???), if this is the case, the call should be rederrred
			--one tick to ensure that all of the gear's loading can complete before it's
			--equipped event is called.
			--TODO: Blame John for this.
			Delay(0, function()
				this.Equipped:fire(mouse)
			end)
		else
			--otherwise, proceed as normal
			this.Equipped:fire(mouse)
		end
	end)

	script.Parent.Unequipped:connect(function()
		--before my teardown, fire the event
		this.Unequipped:fire()

		--delete all my garbage
		this.Bin:cleanAll()
	end)
end)



---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
--                                                                                               --
--                               Specific Gear code starts Here                                  --
--                                                                                               --
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

--register my stuff
Tool.AnimationProvider:registerAnimation('equip', 'http://www.roblox.com/asset/?id=66702743')
Tool.AnimationProvider:registerAnimation('slash', 'http://www.roblox.com/asset/?id=66702758')
Tool.AnimationProvider:registerAnimation('critup', 'http://www.roblox.com/asset/?id=66703957')
Tool.AnimationProvider:registerAnimation('critdown', 'http://www.roblox.com/asset/?id=66703954')
Tool.SoundProvider:registerSound('slash', 'rbxasset://sounds\\swordslash.wav')
Tool.SoundProvider:registerSound('equip', 'rbxasset://sounds\\unsheath.wav')
Tool.SoundProvider:registerSound('down', 'rbxasset://sounds\\swordlunge.wav')
Tool.SoundProvider:registerSound('hitground', 'rbxasset://sounds\\snap.wav')

local DamageEnbled = false
local DamageToDo = 20
local SparkleParts = {}
local SparkleAttach = {}

Tool.Equipped:connect(function()
	print("Equipped")
	Tool.AnimationProvider:getAnimation('equip'):Play(0, 1, 3)
	Tool.SoundProvider:getSound('equip'):Play()
	local handleTouchedConn = Tool.Tool.Handle.Touched:connect(function(part)
		local humanoid = (part.Parent or game):FindFirstChild("Humanoid")
		if DamageEnbled and humanoid then
			TagHumanoid(humanoid)
			humanoid:TakeDamage(DamageToDo)
			wait(1)
			UntagHumanoid()
		end
	end)
	Tool.Bin:add(function()
		handleTouchedConn:disconnect()
	end, 'disconnect_handle_ontouched')

	local color = true
	for i = -3, 3, 1.5 do
		color = not color
		local p = Create'Part'{
			Name = 'EffectPart',
			FormFactor = 'Custom',
			Size = Vector3.new(0.1, 0.1, 0.1),
			Parent = Tool.Tool.Handle,
			Transparency = 1,
			CanCollide = false,
			Create'Fire'{
				Name = 'Effect',
				Enabled = false,
				Color = (color and Color3.new(1, 0, 0) or Color3.new(1, 1, 1)),
				Size = 2,
			},
		}
		--[[SparkleParts[#SparkleParts+1] = p
		local motor = Create'Motor6D'{
			Name = 'EffectAttach',
			Parent = Tool.Tool.Handle,
			Part0 = Tool.Tool.Handle,
			Part1 = p,
			C1 = CFrame.new(i, 0, 0),
		}
		SparkleAttach[#SparkleAttach+1] = motor]]
	end
	Tool.Bin:add(function()
		for _, effectPart in pairs(SparkleParts) do
			effectPart.Parent = nil
		end
		for _, p in pairs(SparkleAttach) do
			p.Parent = nil
		end
		SparkleParts = {}
		SparkleAttach = {}
	end, 'kill_particle_effect')
end)

Tool.Unequipped:connect(function()
	Tool.AnimationProvider:getAnimation('equip'):Stop()
end)

--utility to enable / disable damage. Makes sure that enable-disable
--pairs don't ever interfear with one and other.
local damageEnabledLevel = 0
local function EnableDamage(damage)
	DamageEnbled = true
	DamageToDo = damage
	damageEnabledLevel = damageEnabledLevel + 1
end
local function DisableDamage()
	damageEnabledLevel = damageEnabledLevel - 1
	if damageEnabledLevel &lt;= 0 then
		DamageEnbled = false
	end
end


--set particles enabled
local function SetBladeEffectEnabled(state)
	for _, effectPart in pairs(SparkleParts) do
		effectPart.Effect.Enabled = state
	end
end

local function frand(low, high)
	return low + math.random()*(high-low)
end

--make the hitting ground effect
local PossibleSplashColors = {Color3.new(1, 0, 0), Color3.new(1, 1, 1)}
local function CreateSplashEffect(pos)
	local splashParts = {}
	for i = 1, 20 do
		local part = Create'Part'{
			FormFactor = 'Custom',
			Name = 'SlashParticle',
			Transparency = 1,
			CanCollide = false,
			Size = Vector3.new(0.5, 0.5, 0.5),
			CFrame = CFrame.new(pos),
			Create'Fire'{
				Name = 'Effect',
				Size = 2,
				Color = PossibleSplashColors[math.random(1, #PossibleSplashColors)],
			},
			Create'BodyVelocity'{
				Name = 'Fly',
				P = 100000,
				maxForce = Vector3.new(0, 0, 0),
				velocity = Vector3.new(frand(-1, 1),
				                       frand(0.5,1),
				                       frand(-1, 1)).unit * frand(20, 80),
			},
		}
		splashParts[#splashParts+1] = part
		part.Parent = game.Workspace
		part.Velocity = part.Fly.velocity
		Delay(frand(0.1, 0.4), function()
			part.Parent = nil
		end)
	end
	Tool.Bin:add(function()
		for _, p in pairs(splashParts) do
			p.Parent = nil
		end
	end, 'remove_splash_effect')
end

--====== main action code

Tool.MouseClick:connect(function()
	if Tool.DebounceProvider:test('slash', 0.5) then
		Tool.DebounceProvider:set('slash')
		Tool.AnimationProvider:getAnimation('slash'):Play(0, 1, 4)
		Tool.SoundProvider:getSound('slash'):Play()
		EnableDamage(20)
		wait(0.7)
		DisableDamage()
	end
end)

Tool.MouseDoubleClick:connect(function()
	if not Tool.DebounceProvider:test('doubleclick') then
		Tool.DebounceProvider:set('doubleclick', true)
		--
		Tool.AnimationProvider:getAnimation('slash'):Stop(0)
		Tool.AnimationProvider:getAnimation('critup'):Play(0, 1, 8)
		local torso = Tool.Character:FindFirstChild("Torso")
		if torso then
			--jump high
			Tool.Humanoid.Jump = true
			torso.Velocity = torso.Velocity + Vector3.new(0, 100, 0)

			--wait for the character to reach the top of their jump
			while torso.Velocity.y &gt; 0 do
				wait()
			end

			--now, switch to the critdown anim / sound, activate the damage,
			--and wait for the player to hit something on their way down.
			--also, speed up their descent
			EnableDamage(40)
			Tool.AnimationProvider:getAnimation('critup'):Stop(0)
			Tool.AnimationProvider:getAnimation('critdown'):Play(0, 1, 10)
			Tool.SoundProvider:getSound('down'):Play()
			torso.Velocity = torso.Velocity - Vector3.new(0, 10, 0)

			SetBladeEffectEnabled(true) --show some particles on the way down

			local rightLeg = Tool.Character:FindFirstChild('Right Leg')
			local leftLeg = Tool.Character:FindFirstChild('Left Leg')
			WaitForAny{rightLeg.Touched, leftLeg.Touched}

			SetBladeEffectEnabled(false) --get rid of the particles, we've leanded

			--play the hit gound sound
			Tool.SoundProvider:getSound('hitground'):Play()

			--generate a splash effect where the collision occurred
			local handle = Tool.Tool:FindFirstChild('Handle')
			if handle then
				CreateSplashEffect((handle.CFrame*CFrame.new(2.5, 0, 0)).p)
			end

			--now, we touched down, so halt the player for a cooldown, and
			--wait a bit for the cooldown to expire
			Tool.Humanoid.WalkSpeed = 0
			wait(0.6)

			--unfreeze them and stop the anim, also, disable the damage
			Tool.Humanoid.WalkSpeed = 16
			Tool.AnimationProvider:getAnimation('critdown'):Stop()
			DisableDamage()
		else
			--no torso? Something is wrong, stop the anim
			Tool.AnimationProvider:getAnimation('critup'):Stop(0)
		end
		--
		Tool.DebounceProvider:set('doubleclick', false)
	end
end)

--print("Done Running swordscript &lt;"..mDebugId.."&gt;")</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
					<Item class="Script" referent="RBXEDE941769D4D4DBBB6F48578E70FB504">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null /></Content>
							<string name="Name">MotorizeRightGrip</string>
							<token name="RunContext">0</token>
							<string name="ScriptGuid">{D7FAAC41-0BBF-4F77-AB5A-B869623CB880}</string>
							<ProtectedString name="Source">function Create(ty)
	return function(data)
		local obj = Instance.new(ty)
		for k, v in pairs(data) do
			if type(k) == 'number' then
				v.Parent = obj
			else
				obj[k] = v
			end
		end
		return obj
	end
end

local Tool = script.Parent.Parent

local armChildRemovedConn = nil
local Motor6DGrip = nil
local EquippedNum = 0

Tool.Equipped:connect(function()
	EquippedNum = EquippedNum + 1
	local myEquip = EquippedNum
	--some vars
	local Player = game.Players:GetPlayerFromCharacter(Tool.Parent)
	local Character = Player.Character

	local rightarm = Character:FindFirstChild('Right Arm')
	if rightarm and rightarm:FindFirstChild('RightGrip') then
		local rightGrip = rightarm['RightGrip']
		local handle = rightGrip.Part1

		--kill my joint when the normal joint is removed
		--this must be done here so that the joint is removed
		--_right away_ after unequipping and the character doesn't
		--glitch up.
		local armChildRemovedConn = rightarm.ChildRemoved:connect(function(ch)
			if ch == rightGrip then
				Motor6DGrip:Remove()
				Motor6DGrip = nil
				--
				if handle and Character:FindFirstChild('Torso') then
					if Tool.Parent.Parent:IsA('Player') then
						--the sword has been deselected
						--put the sword far away so the user doesn't notice that the handle doesn't
						--update for about 0.1 seconds after selecting the tool.
						handle.CFrame = CFrame.new(100000, 100000, 100000)
					else
						--if in the workspace, position the handle where it should be dropped
						--use the size of the handle to make sure it's dropped far enough away
						handle.CFrame = Character.Torso.CFrame * CFrame.new(0, 0, -(handle.Size.magnitude+2))
					end
				end
			end
		end)

		--make my new joint
		Motor6DGrip = Create'Motor6D'{
			Name = 'RightGrip_Motor',
			Part0 = rightarm,
			Part1 = handle,
		}
		--kill the old weld
		rightGrip.Part1 = nil
		rightGrip.Part0 = nil
		Motor6DGrip.Parent = rightGrip.Parent
	end
end)

Tool.Unequipped:connect(function()
	EquippedNum = EquippedNum + 1
	if armChildRemovedConn then
		armChildRemovedConn:disconnect()
		armChildRemovedConn = nil
	end
end)
</ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
					</Item>
				</Item>
				<Item class="Part" referent="RBX716F7642532E49E388B4D7423EF54968">
					<Properties>
						<bool name="Anchored">false</bool>
						<BinaryString name="AttributesSerialize" />
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>-0.233470112</X>
							<Y>48.7395287</Y>
							<Z>-4.25897408</Z>
							<R00>-0.115181141</R00>
							<R01>0.8782565</R01>
							<R02>0.464110851</R02>
							<R10>-0.933347106</R10>
							<R11>-0.2556023</R11>
							<R12>0.252052933</R12>
							<R20>0.339994997</R20>
							<R21>-0.404144764</R21>
							<R22>0.849158883</R22>
						</CoordinateFrame>
						<bool name="CanCollide">true</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized" />
						<string name="Name">Handle</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">3</token>
						<token name="shape">1</token>
						<Vector3 name="size">
							<X>5</X>
							<Y>0.5</Y>
							<Z>0.300000012</Z>
						</Vector3>
					</Properties>
					<Item class="SpecialMesh" referent="RBXA33661AA503A4592B825EABAA8CD6F03">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="MeshId"><url>http://roblox.com/asset/?id=66700667 </url></Content>
							<token name="MeshType">5</token>
							<string name="Name">Mesh</string>
							<Vector3 name="Offset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<Vector3 name="Scale">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
							<Content name="TextureId"><url>http://www.roblox.com/asset/?id=66700239</url></Content>
							<Vector3 name="VertexColor">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
						</Properties>
					</Item>
				</Item>
				<Item class="Camera" referent="RBX001DC957B6914325B05257E907EA202B">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<CoordinateFrame name="CFrame">
							<X>2.83663177</X>
							<Y>50.7579269</Y>
							<Z>-0.337269545</Z>
							<R00>0.783692896</R00>
							<R01>-0.237705231</R01>
							<R02>0.573865473</R02>
							<R10>1.49011594e-08</R10>
							<R11>0.923878193</R11>
							<R12>0.382686675</R12>
							<R20>-0.621148407</R20>
							<R21>-0.299908817</R21>
							<R22>0.724036872</R22>
						</CoordinateFrame>
						<Ref name="CameraSubject">null</Ref>
						<token name="CameraType">0</token>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<float name="FieldOfView">70</float>
						<token name="FieldOfViewMode">0</token>
						<CoordinateFrame name="Focus">
							<X>-0.190095782</X>
							<Y>48.7395287</Y>
							<Z>-4.15604353</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="HeadLocked">true</bool>
						<float name="HeadScale">1</float>
						<string name="Name">ThumbnailCamera</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<bool name="VRTiltAndRollEnabled">false</bool>
					</Properties>
				</Item>
			</Item>
		</Item>
		