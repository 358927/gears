<Item class="Model" referent="RBXAF08FB27BCB44F39A6344BA8F978D133">
			<Properties>
				<BinaryString name="AttributesSerialize" />
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<token name="LevelOfDetail">0</token>
				<CoordinateFrame name="ModelMeshCFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
				<Vector3 name="ModelMeshSize">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="ModelStreamingMode">0</token>
				<string name="Name">302281291</string>
				<bool name="NeedsPivotMigration">false</bool>
				<Ref name="PrimaryPart">null</Ref>
				<float name="ScaleFactor">1</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags" />
				<OptionalCoordinateFrame name="WorldPivotData" />
			</Properties>
			<Item class="Tool" referent="RBXB71EDD89700A4F2683787DD9748A80E5">
				<Properties>
					<BinaryString name="AttributesSerialize" />
					<bool name="CanBeDropped">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="Enabled">true</bool>
					<CoordinateFrame name="Grip">
						<X>0</X>
						<Y>-0.774999976</Y>
						<Z>-0.5</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<token name="LevelOfDetail">0</token>
					<bool name="ManualActivationOnly">false</bool>
					<CoordinateFrame name="ModelMeshCFrame">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<Vector3 name="ModelMeshSize">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="ModelStreamingMode">0</token>
					<string name="Name">TarantulaPet</string>
					<bool name="NeedsPivotMigration">false</bool>
					<Ref name="PrimaryPart">null</Ref>
					<bool name="RequiresHandle">true</bool>
					<float name="ScaleFactor">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags" />
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=297604377</url></Content>
					<string name="ToolTip" />
					<OptionalCoordinateFrame name="WorldPivotData">
						<CFrame>
							<X>0.00876600016</X>
							<Y>12.1688709</Y>
							<Z>0.000985999941</Z>
							<R00>-0.570761263</R00>
							<R01>-0.013202453</R01>
							<R02>0.821009934</R02>
							<R10>5.90598502e-05</R10>
							<R11>0.999870181</R11>
							<R12>0.016119713</R12>
							<R20>-0.82111603</R20>
							<R21>0.00924899802</R21>
							<R22>-0.57068634</R22>
						</CFrame>
					</OptionalCoordinateFrame>
				</Properties>
				<Item class="Part" referent="RBX8B584FA80A8640719E0176D42EEBE9D7">
					<Properties>
						<bool name="Anchored">false</bool>
						<BinaryString name="AttributesSerialize" />
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>0.00876600016</X>
							<Y>12.1688709</Y>
							<Z>0.000985999941</Z>
							<R00>-0.570761263</R00>
							<R01>-0.013202453</R01>
							<R02>0.821009934</R02>
							<R10>5.90598502e-05</R10>
							<R11>0.999870181</R11>
							<R12>0.016119713</R12>
							<R20>-0.82111603</R20>
							<R21>0.00924899802</R21>
							<R22>-0.57068634</R22>
						</CoordinateFrame>
						<bool name="CanCollide">true</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">true</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized" />
						<string name="Name">Handle</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">3</token>
						<token name="shape">1</token>
						<Vector3 name="size">
							<X>2</X>
							<Y>0.800000012</Y>
							<Z>2</Z>
						</Vector3>
					</Properties>
					<Item class="SpecialMesh" referent="RBXBA52A3DF8965416B993F2E04218DB52F">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="MeshId"><url>http://www.roblox.com/asset/?id=297604254</url></Content>
							<token name="MeshType">5</token>
							<string name="Name">Mesh</string>
							<Vector3 name="Offset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<Vector3 name="Scale">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
							<Content name="TextureId"><url>http://www.roblox.com/asset/?id=297604312</url></Content>
							<Vector3 name="VertexColor">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
						</Properties>
					</Item>
				</Item>
				<Item class="LocalScript" referent="RBXAB0BEFFB738C4736B3670E51231C9800">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">MouseIcon</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{CD29DE20-31CD-4DDE-B49D-AA0A00FA90FE}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBX41C914FEA0C147ECBF5040B6B4D40CC7">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">LocalScript</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{29759AFA-B4F7-444A-9E53-1A478F77419C}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")

Animations = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

Rate = (1 / 60)

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop(value.FadeTime)
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	PlayerMouse = Player:GetMouse()
end

function Unequipped()
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="Script" referent="RBX5E0485CAE71442C2A6830BC3F6168844">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">Script</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{FD7C3098-637D-402B-8D7E-E2060D7047DE}</string>
						<ProtectedString name="Source">--Made by Luckymaxer
--Updated for R15 avatar by StarWars

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
InsertService = game:GetService("InsertService")

SpiderModel = InsertService:LoadAsset(299861127)
Spider = SpiderModel:GetChildren()[1]:Clone()
Debris:AddItem(SpiderModel, 1)

CobWebShot = script:WaitForChild("CobWebShot")

local function Create_PrivImpl(objectType)
	if type(objectType) ~= 'string' then
		error("Argument of Create must be a string", 2)
	end
	--return the proxy function that gives us the nice Create'string'{data} syntax
	--The first function call is a function call using Lua's single-string-argument syntax
	--The second function call is using Lua's single-table-argument syntax
	--Both can be chained together for the nice effect.
	return function(dat)
		--default to nothing, to handle the no argument given case
		dat = dat or {}

		--make the object to mutate
		local obj = Instance.new(objectType)
		local parent = nil

		--stored constructor function to be called after other initialization
		local ctor = nil

		for k, v in pairs(dat) do
			--add property
			if type(k) == 'string' then
				if k == 'Parent' then
					-- Parent should always be set last, setting the Parent of a new object
					-- immediately makes performance worse for all subsequent property updates.
					parent = v
				else
					obj[k] = v
				end


			--add child
			elseif type(k) == 'number' then
				if type(v) ~= 'userdata' then
					error("Bad entry in Create body: Numeric keys must be paired with children, got a: "..type(v), 2)
				end
				v.Parent = obj


			--event connect
			elseif type(k) == 'table' and k.__eventname then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create.E\'"..k.__eventname.."\']` must have a function value\
							got: "..tostring(v), 2)
				end
				obj[k.__eventname]:connect(v)


			--define constructor function
			elseif k == t.Create then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create]` should be paired with a constructor function, \
							got: "..tostring(v), 2)
				elseif ctor then
					--ctor already exists, only one allowed
					error("Bad entry in Create body: Only one constructor function is allowed", 2)
				end
				ctor = v


			else
				error("Bad entry ("..tostring(k).." =&gt; "..tostring(v)..") in Create body", 2)
			end
		end

		--apply constructor function if it exists
		if ctor then
			ctor(obj)
		end

		if parent then
			obj.Parent = parent
		end

		--return the completed object
		return obj
	end
end

--now, create the functor:
Create = setmetatable({}, {__call = function(tb, ...) return Create_PrivImpl(...) end})

--and create the "Event.E" syntax stub. Really it's just a stub to construct a table which our Create
--function can recognize as special.
Create.E = function(eventName)
	return {__eventname = eventName}
end


Remover = script:WaitForChild("Remover")

NPCModule = require(191816425)

BaseUrl = "http://www.roblox.com/asset/?id="

Sounds = {}

BasePart = Create("Part"){
	Shape = Enum.PartType.Block,
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
	Anchored = false,
}

ReloadTime = 60
Duration = nil

SpidersSpawned = false
SpidersReady = false

CurrentSpiders = {}

ToolEquipped = false

ServerControl = (Tool:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Tool,
})

ClientControl = (Tool:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Tool,
})

Handle.Transparency = 0
Tool.Enabled = true

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function CreateSpiderModel()
	local SpiderModel = Create("Model"){
		Name = ToolName,
	}
	local CobWebShotScript = CobWebShot:Clone()
	CobWebShotScript.Disabled = false
	CobWebShotScript.Parent = SpiderModel
	local RemoverClone = Remover:Clone()
	local Values = {
		{Name = "Creator", Class = "ObjectValue", Value = Player},
		{Name = "Tool", Class = "ObjectValue", Value = Tool},
	}
	for i, v in pairs(Values) do
		local Value = Create(v.Class){
			Name = v.Name,
			Value = v.Value,
			Parent = SpiderModel,
		}
	end
	RemoverClone.Disabled = false
	RemoverClone.Parent = SpiderModel
	return SpiderModel
end

function SetUpSpider(Figure)
	NPCData.MakeNPC({NPC = Figure, AIControl = {Creator = Player, Mode = "Follow", MaxDistance = 100, Follow = Player, Offset = Vector3.new(2, 0, 0), Chase = false, ChaseDistance = 50, ChaseRange = 8, Target = nil, TargetPos = Vector3.new(0, 0, 0), Damage = 15, NormalSpeed = 16, ChaseSpeed = 22, SelfSufficient = false}})
	Figure.Name = "Tarantula"
	local Humanoid = Figure:FindFirstChild("Humanoid")
	local Torso = Figure:FindFirstChild("Torso")
	if Humanoid and Torso then
		Humanoid.Died:connect(function()
			Debris:AddItem(Figure, 2)
		end)
		Humanoid.Jumping:connect(function()
		end)
		Figure.Changed:connect(function(Property)
			if Property == "Parent" and not Figure.Parent then
				Debris:AddItem(Figure, 2)
			end
		end)
	end
	return Figure
end

function SpawnSpiders()
	local Data = NPCModule.GetTable({Key = "MakeNPC", Player = Player})
	if not Data then
		return
	end
	NPCData = Data.GetData({Player = Player, Tool = Tool})
	SpidersReady = false
	CurrentSpiders = {}
	local SpiderModel = CreateSpiderModel()
	NPCData.MakeNPC({NPC = SpiderModel, AIControl = {Creator = Player, SelfSufficient = true}})
	local BaseNPC = SetUpSpider(Spider:Clone())
	SpiderModel.Changed:connect(function(Property)
		if Property == "Parent" and not SpiderModel.Parent then
			for i, v in pairs(CurrentSpiders) do
				if v and v.Parent then
					v:Destroy()
				end
			end
			CurrentSpiders = {}
			Tool.Enabled = false
			wait(ReloadTime)
			Tool.Enabled = true
			Handle.Transparency = 0
			SpidersSpawned = false
		end
	end)
	if Duration then
		Debris:AddItem(SpiderModel, Duration)
	end
	SpiderModel.Parent = game:GetService("Workspace")
	local function CreatePawn()
		local SpiderCopy = BaseNPC:Clone()
		local SpiderHumanoid = SpiderCopy.Humanoid
		local SpiderTorso = SpiderCopy.Torso
		table.insert(CurrentSpiders, SpiderCopy)
		SpiderCopy.Changed:connect(function(Property)
			if Property == "Parent" and not SpiderCopy.Parent then
				for i, v in pairs(CurrentSpiders) do
					if v == SpiderCopy then
						table.remove(CurrentSpiders, i)
						if #CurrentSpiders == 0 then
							if SpiderModel and SpiderModel.Parent then
								Debris:AddItem(SpiderModel, 1)
								SpiderModel:Destroy()
							end
						end
					end
				end
			end
		end)
		local OffsetValue = SpiderCopy.Offset
		OffsetValue.Value = Vector3.new(-5, 0, -0.5)
		SpiderCopy.Parent = SpiderModel
		SpiderTorso.CFrame = (Torso.CFrame * CFrame.new(OffsetValue.Value) - Vector3.new(0, 0.2, 0))
		SpiderHumanoid:ChangeState(Enum.HumanoidStateType.Freefall)
	end
	for i = 1, 1 do
		CreatePawn()
	end
	SpidersReady = true
end

function Activated()
	if not Tool.Enabled or not ToolEquipped then
		return
	end
	local SpiderModel = game:GetService("Workspace"):FindFirstChild(ToolName)
	if SpiderModel then
		local MouseData = InvokeClient("MousePosition")
		local MousePosition = MouseData.Position
		local MouseTarget = MouseData.Target
		for i, v in pairs(CurrentSpiders) do
			if v and v.Parent then
				local Target = v:FindFirstChild("Target")
				local TargetPos = v:FindFirstChild("TargetPos")
				local Mode = v:FindFirstChild("Mode")
				local NewMode = nil
				if Target and TargetPos and Mode then
					if MouseTarget and MouseTarget.Parent then
						TargetPos.Value = MousePosition
						local character = MouseTarget.Parent
						if character:IsA("Hat") then
							character = character.Parent
						end
						local player = Players:GetPlayerFromCharacter(character)
						if not player or (player and not IsTeamMate(player, Player)) then
							local creator = character:FindFirstChild("Creator")
							local humanoid = character:FindFirstChild("Humanoid")
							if humanoid and humanoid.Health &gt; 0 and (not creator or (creator and creator.Value ~= Player and not IsTeamMate(Player, creator.Value))) then
								Target.Value = character
								NewMode = "Attack"
							end
						end
						if not NewMode then
							Target.Value = nil
							TargetPos.Value = MousePosition
							NewMode = "MoveTo"
						end
					else
						Target.Value = nil
						NewMode = "Follow"
					end
				end
				if NewMode then
					Mode.Value = NewMode
				end
			end
		end
	elseif not SpiderModel and not SpidersSpawned then
		Handle.Transparency = 1
		SpidersSpawned = true
		SpawnSpiders()
	end
end

function CheckIfAlive()
	return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso")
	if not CheckIfAlive() then
		return
	end
	ToolName = (Player.Name .. "'sTarantulas")
	ToolEquipped = true
end

function Unequipped()
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, Mode, Value)
	if player ~= Player or not ToolEquipped or not CheckIfAlive() or not Mode or not Value then
		return
	end
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Changed:connect(function(Property)
	if Property == "Parent" and Tool.Parent then
		Handle.Transparency = (((Tool.Parent:IsA("Backpack") or Players:GetPlayerFromCharacter(Tool.Parent) and ((not SpidersSpawned and 0) or 1)) or 0))
	end
end)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
					<Item class="Script" referent="RBXB3E1AE46C6CF437AA7213876EDA751FC">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null /></Content>
							<string name="Name">Remover</string>
							<token name="RunContext">0</token>
							<string name="ScriptGuid">{6D0BD440-B87D-4941-B5ED-FE2C94F6707B}</string>
							<ProtectedString name="Source">--Made by Luckymaxer

Model = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

Creator = Model:FindFirstChild("Creator")
Tool = Model:FindFirstChild("Tool")

function DestroyModel()
	Debris:AddItem(Model, 2)
end

if not Creator or not Creator.Value or not Creator.Value:IsA("Player") or not Creator.Value.Parent or not Tool or not Tool.Value or not Tool.Value.Parent then
	DestroyModel()
	return
end

Creator = Creator.Value
Tool = Tool.Value

Character = Creator.Character
if not Character then
	DestroyModel()
	return
end

Creator.Changed:connect(function(Property)
	if Property == "Parent" and not Creator.Parent then
		DestroyModel()
	end
end)

Character.Changed:connect(function(Property)
	if Property == "Parent" and not Character.Parent then
		DestroyModel()
	end
end)

Tool.Changed:connect(function(Property)
	if Property == "Parent" and (not Tool.Parent or (not Tool.Parent:IsA("Backpack") and not Players:GetPlayerFromCharacter(Tool.Parent))) then
		DestroyModel()
	end
end)</ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
					</Item>
					<Item class="Script" referent="RBX4C75B299929E4C2C97037A5C163FEC14">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null /></Content>
							<string name="Name">CobWebShot</string>
							<token name="RunContext">0</token>
							<string name="ScriptGuid">{7C84F63A-BF79-4938-8668-D77A750442F9}</string>
							<ProtectedString name="Source">--Made by Luckymaxer

Model = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

BaseUrl = "http://www.roblox.com/asset/?id="

StunScript = script:WaitForChild("StunScript")
CoverScreen = script:WaitForChild("CoverScreen")

Creator = Model:WaitForChild("Creator")

SpiderConfiguration = {
	Name = "Tarantula",
	ShootDistance = {Min = 0, Max = 25},
	FireRate = {Min = 2, Max = 5},
	Accuracy = {X = {Min = -1.5, Max = 1.5}, Y = {Min = -1.5, Max = 1.5}, Z = {Min = -1.5, Max = 1.5}},
	FadeDelay = 0.5,
	FadeRate = (1 / 60),
	Damage = 25,
	Color = BrickColor.new("Institutional white"),
}

for i, v in pairs(SpiderConfiguration.FireRate) do
	SpiderConfiguration.FireRate[i] = (v * 1000)
end
for i, v in pairs(SpiderConfiguration.Accuracy) do
	for ii, vv in pairs(v) do
		SpiderConfiguration.Accuracy[i][ii] = (vv * 1000)
	end
end

StunTag = "TarantulaStun"
StunDuration = 8
SpidersControlled = false
Spiders = {}

BasePart = Create("Part"){
	Shape = Enum.PartType.Block,
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
	Anchored = false,
}

BaseWeb = BasePart:Clone()
BaseWeb.Name = "Effect"
BaseWeb.Size = Vector3.new(0.2, 0.2, 0.2)
BaseWeb.CanCollide = false
Create("SpecialMesh"){
	Name = "Mesh",
	MeshType = Enum.MeshType.FileMesh,
	MeshId = (BaseUrl .. "299832836"),
	TextureId = (BaseUrl .. "299832567"),
	Scale = Vector3.new(1, 1, 1),
	VertexColor = Vector3.new(1, 1, 1),
	Offset = Vector3.new(0, 0, 0),
	Parent = BaseWeb,
}

function GetCreator()
	local CreatorValue = Creator.Value
	return (((CreatorValue and CreatorValue.Parent and CreatorValue:IsA("Player")) and CreatorValue) or nil)
end

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function TagHumanoid(humanoid, player)
	local Creator_Tag = Create("ObjectValue"){
		Name = "creator",
		Value = player,
	}
	Debris:AddItem(Creator_Tag, 2)
	Creator_Tag.Parent = humanoid
end

function UntagHumanoid(humanoid)
	for i, v in pairs(humanoid:GetChildren()) do
		if v:IsA("ObjectValue") and v.Name == "creator" then
			v:Destroy()
		end
	end
end

function CheckUpsideDown(CFrame, Surface, MaxAngle)
	local Vector1 = CFrame:vectorToWorldSpace(Vector3.FromNormalId(Surface))
	local Vector2 = Vector3.new(0, 1, 0)
	local Angle = math.acos(Vector1:Dot(Vector2))
	return (Angle &gt; MaxAngle)
end

function CheckTableForString(Table, String)
	for i, v in pairs(Table) do
		if string.find(string.lower(String), string.lower(v)) then
			return true
		end
	end
	return false
end

function CheckIntangible(Hit)
	local ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Bullet"}
	if Hit and Hit.Parent then
		if ((not Hit.CanCollide or Hit.Parent:IsA("Hat") or CheckTableForString(ProjectileNames, Hit.Name)) and not Hit.Parent:FindFirstChild("Humanoid")) then
			return true
		end
	end
	return false
end

function CastRay(StartPos, Vec, Length, Ignore, DelayIfHit)
	local Ignore = ((type(Ignore) == "table" and Ignore) or {Ignore})
	local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
	if RayHit and CheckIntangible(RayHit) then
		if DelayIfHit then
			wait()
		end
		RayHit, RayPos, RayNormal = CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).magnitude)), Ignore, DelayIfHit)
	end
	return RayHit, RayPos, RayNormal
end

function SplatGui(Player)
	if not Player or not Player:IsA("Player") then
		return
	end
	local PlayerGui = Player:FindFirstChild("PlayerGui")
	if not PlayerGui then
		return
	end
	local Gui = CoverScreen:Clone()
	Debris:AddItem(Gui, StunDuration)
	Gui.Parent = PlayerGui
end

function ControlSpiders()
	if SpidersControlled or #Spiders == 0 then
		return
	end
	SpidersControlled = true
	while #Spiders &gt; 0 do
		local CreatorPlayer = GetCreator()
		if CreatorPlayer then
			local Now = tick()
			for i, v in pairs(Spiders) do
				local TargetPlayer = nil
				if v and v.Spider and v.Spider.Parent and v.Humanoid and v.Humanoid.Health &gt; 0 and v.Torso and v.Torso.Parent then
					if v.TargetPlayer ~= v.Target.Value then
						v.ChaseRange.Value = v.OriginalChaseRange
					elseif v.Target.Value and v.Target.Value.Parent then
						local TarantulaStun = v.Target.Value:FindFirstChild(StunTag)
						v.ChaseRange.Value = ((not TarantulaStun and 8) or 0)
					else
						v.ChaseRange.Value = v.OriginalChaseRange
					end
					if (Now - v.CobWebs.Tick) &gt;= v.CobWebs.Delay and not CheckUpsideDown(v.Torso.CFrame, Enum.NormalId.Top, (math.pi / 3)) then
						v.CobWebs.Tick = Now
						v.CobWebs.Delay = (math.random(SpiderConfiguration.FireRate.Min, SpiderConfiguration.FireRate.Max) * 0.001)
						if v.Target.Value then
							local character = v.Target.Value
							if character and character.Parent then
								local player = Players:GetPlayerFromCharacter(character)
								if not player or (player and player ~= CreatorPlayer and not IsTeamMate(CreatorPlayer, player)) then
									local humanoid = character:FindFirstChild("Humanoid")
									local head = character:FindFirstChild("Head")
									if humanoid and humanoid.Health &gt; 0 and head then
										local DistanceApart = (v.Torso.Position - head.Position).Magnitude
										if --[[DistanceApart &gt;= SpiderConfiguration.ShootDistance.Min and]] DistanceApart &lt;= SpiderConfiguration.ShootDistance.Max then
											TargetPlayer = {Player = player, Character = character, Humanoid = humanoid, Head = head, Distance = DistanceApart}
										end
									end
								end
							end
							if TargetPlayer then
								local TarantulaStun = character:FindFirstChild(StunTag)
								if not TarantulaStun then
									local SpawnPos = (v.Torso.CFrame * CFrame.new(0, -0.1, (-(v.Torso.Size.Z / 2) + 0.05))).p
									local TargetPos = TargetPlayer.Head.Position
									local Accuracy = SpiderConfiguration.Accuracy
									Accuracy = Vector3.new((math.random(Accuracy.X.Min, Accuracy.X.Max) * 0.001), (math.random(Accuracy.Y.Min, Accuracy.Y.Max) * 0.001), (math.random(Accuracy.Z.Min, Accuracy.Z.Max) * 0.001))
									TargetPos = (TargetPos + Accuracy)
									local Direction = CFrame.new(SpawnPos, TargetPos)
									local Distance = (SpawnPos - TargetPos).Magnitude
									local RayHit, RayPos, RayNormal = CastRay(SpawnPos, Direction.lookVector, (Distance + 5), {v.Spider, CreatorPlayer.Character}, false)
									local RayDistance = (SpawnPos - RayPos).Magnitude
									local CobString = BasePart:Clone()
									CobString.Name = "Effect"
									CobString.Material = Enum.Material.Sand
									CobString.BrickColor = SpiderConfiguration.Color
									CobString.Size = Vector3.new(1, 1, 1)
									CobString.CanCollide = false
									CobString.Anchored = true
									for i, v in pairs({"Top", "Bottom", "Left", "Right", "Front", "Back"}) do
										CobString[(v .. "Surface")] = Enum.SurfaceType.SmoothNoOutlines
									end
									local Mesh = Create("CylinderMesh"){
										Parent = CobString,
									}
									Debris:AddItem(CobString, 3)
									CobString.Parent = game:GetService("Workspace")
									CobString.CFrame = ((Direction + Direction.lookVector * (RayDistance / 2)) * CFrame.Angles((math.pi / 2), 0, 0))
									Mesh.Scale = Vector3.new(0.15, RayDistance, 0.15)
									Spawn(function()
										local Frames = math.floor(SpiderConfiguration.FadeDelay / SpiderConfiguration.FadeRate)
										for Frame = 1, Frames do
											wait(SpiderConfiguration.FadeRate)
											local Percent = (Frame / Frames)
											CobString.Transparency = Percent
										end
									end)
									if RayHit then
										local character = RayHit.Parent
										if character:IsA("Hat") then
											character = character.Parent
										end
										local player = Players:GetPlayerFromCharacter(character)
										local humanoid = character:FindFirstChild("Humanoid")
										local head = character:FindFirstChild("Head")
										local torso = character:FindFirstChild("Torso")
										if character == TargetPlayer.Character and humanoid and humanoid.Health &gt; 0 and head and torso then
											v.TargetPlayer = character
											local StunScriptCopy = StunScript:Clone()
											local Duration = Create("NumberValue"){
												Name = "Duration",
												Value = StunDuration,
												Parent = StunScriptCopy,
											}
											StunScriptCopy.Disabled = false
											StunScriptCopy.Parent = character
											local player = Players:GetPlayerFromCharacter(character)
											if player then
												SplatGui(TargetPlayer.Player)
											end
											TarantulaStun = Create("BoolValue"){
												Name = StunTag,
												Value = true,
											}
											Debris:AddItem(TarantulaStun, StunDuration)
											TarantulaStun.Parent = character
											UntagHumanoid(TargetPlayer.Humanoid)
											TagHumanoid(TargetPlayer.Humanoid, CreatorPlayer)
											TargetPlayer.Humanoid:TakeDamage(SpiderConfiguration.Damage)
											local Web = BaseWeb:Clone()
											Web.Mesh.Scale = (Vector3.new(math.random(750, 1200), math.random(750, 1250), math.random(750, 2000)) * 0.001)
											local WebOffset = Vector3.new(math.random(0, 500), math.random(-250, 250), ((((head.Size.Z / 2) + (Web.Size.Z / 2)) * -1) * 1000))
											WebOffset = (WebOffset * 0.001)
											local Weld = Create("Weld"){
												Part0 = head,
												Part1 = Web,
												C0 = CFrame.new(WebOffset),
												Parent = Web,
											}
											Debris:AddItem(Web, StunDuration)
											Web.Parent = character
											if TargetPlayer.Humanoid.Health &lt;= 0 then
											end
										end
									end
								end
							end
						end
					end
				end
				if not TargetPlayer and not v.Target.Value then
					v.ChaseRange.Value = v.OriginalChaseRange
				end
			end
		end
		wait()
	end
	SpidersControlled = false
end

function FunctionSpider(Child)
	if not Child:IsA("Model") or not string.find(string.lower(Child.Name), string.lower(SpiderConfiguration.Name)) then
		return
	end
	for i, v in pairs(Spiders) do
		if v and v.Spider and v.Spider == Child then
			return
		end
	end
	local Spider = Child
	local Humanoid = Spider:FindFirstChild("Humanoid")
	local Torso = Spider:FindFirstChild("Torso")
	local Target = Spider:WaitForChild("Target")
	local ChaseRange = Spider:WaitForChild("ChaseRange")
	if not Humanoid or Humanoid.Health == 0 or not Torso or not Target or not ChaseRange then
		return
	end
	local CobWebDelay = (math.random(SpiderConfiguration.FireRate.Min, SpiderConfiguration.FireRate.Max) * 0.001)
	local Table = {
		Spider = Child,
		Humanoid = Humanoid,
		Torso = Torso,
		Target = Target,
		ChaseRange = ChaseRange,
		OriginalChaseRange = ChaseRange.Value,
		TargetPlayer = nil,
		CobWebs = {Tick = tick(), Delay = CobWebDelay},
	}
	table.insert(Spiders, Table)
	ControlSpiders()
end

for i, v in pairs(Model:GetChildren()) do
	FunctionSpider(v)
end

Model.ChildAdded:connect(function(Child)
	FunctionSpider(Child)
end)

Model.ChildRemoved:connect(function(Child)
	for i, v in pairs(Spiders) do
		if v and v.Spider and v.Spider == Child then
			table.remove(Spiders, i)
			break
		end
	end
end)

ControlSpiders()</ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
						<Item class="ScreenGui" referent="RBX2A1C4CEC94054712AAC72289A0A20156">
							<Properties>
								<BinaryString name="AttributesSerialize" />
								<bool name="AutoLocalize">true</bool>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="ClipToDeviceSafeArea">true</bool>
								<bool name="DefinesCapabilities">false</bool>
								<int name="DisplayOrder">0</int>
								<bool name="Enabled">true</bool>
								<string name="Name">CoverScreen</string>
								<bool name="ResetOnSpawn">true</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<token name="SafeAreaCompatibility">1</token>
								<token name="ScreenInsets">2</token>
								<token name="SelectionBehaviorDown">0</token>
								<token name="SelectionBehaviorLeft">0</token>
								<token name="SelectionBehaviorRight">0</token>
								<token name="SelectionBehaviorUp">0</token>
								<bool name="SelectionGroup">false</bool>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags" />
								<token name="ZIndexBehavior">0</token>
							</Properties>
							<Item class="Frame" referent="RBXFCA0FC7800AB47FA82BF8D564D5521E0">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize" />
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">1</int>
									<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
									<bool name="ClipsDescendants">false</bool>
									<bool name="DefinesCapabilities">false</bool>
									<bool name="Draggable">false</bool>
									<bool name="Interactable">true</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">Frame</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>-1.5</XS>
										<XO>0</XO>
										<YS>-1.5</YS>
										<YO>0</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<token name="SelectionBehaviorDown">0</token>
									<token name="SelectionBehaviorLeft">0</token>
									<token name="SelectionBehaviorRight">0</token>
									<token name="SelectionBehaviorUp">0</token>
									<bool name="SelectionGroup">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<int name="SelectionOrder">0</int>
									<UDim2 name="Size">
										<XS>3</XS>
										<XO>0</XO>
										<YS>3</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags" />
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="Script" referent="RBX28738BE3CF9C4ECD805D926C78245476">
							<Properties>
								<BinaryString name="AttributesSerialize" />
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<bool name="Disabled">true</bool>
								<Content name="LinkedSource"><null /></Content>
								<string name="Name">StunScript</string>
								<token name="RunContext">0</token>
								<string name="ScriptGuid">{07078920-6DE9-45D4-A7FE-7B4CE38393F2}</string>
								<ProtectedString name="Source">--Made by Luckymaxer

Character = script.Parent
Humanoid = Character:FindFirstChild("Humanoid")

Debris = game:GetService("Debris")

Duration = script:FindFirstChild("Duration")

Destroying = false

function DestroyScript()
	if Destroying then
		return
	end
	Destroying = true
	if Humanoid then
		Humanoid.WalkSpeed = 16
	end
	Debris:AddItem(script, 0.5)
end

if not Humanoid or Humanoid.Health == 0 or not Humanoid:IsA("Humanoid") or not Duration or Duration.Value &lt;= 0 then
	DestroyScript()
	return
end

Humanoid.WalkSpeed = 6

wait(Duration.Value)

DestroyScript()</ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags" />
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
		