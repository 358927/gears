<Item class="Model" referent="RBX6AE61A3EE3FE4C2DB9514EF1100E463C">
			<Properties>
				<BinaryString name="AttributesSerialize" />
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<token name="LevelOfDetail">0</token>
				<CoordinateFrame name="ModelMeshCFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
				<Vector3 name="ModelMeshSize">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="ModelStreamingMode">0</token>
				<string name="Name">193771176</string>
				<bool name="NeedsPivotMigration">false</bool>
				<Ref name="PrimaryPart">null</Ref>
				<float name="ScaleFactor">1</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags" />
				<OptionalCoordinateFrame name="WorldPivotData" />
			</Properties>
			<Item class="Tool" referent="RBX702C3146E97B4CB29EEA6C636942AC70">
				<Properties>
					<BinaryString name="AttributesSerialize" />
					<bool name="CanBeDropped">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="Enabled">true</bool>
					<CoordinateFrame name="Grip">
						<X>-0.300000012</X>
						<Y>0.349999994</Y>
						<Z>-0.0500000007</Z>
						<R00>0.780771196</R00>
						<R01>-0.624816954</R01>
						<R02>-9.65498657e-06</R02>
						<R10>0.624816895</R10>
						<R11>0.780771315</R11>
						<R12>1.2064872e-05</R12>
						<R20>0</R20>
						<R21>-1.5452506e-05</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<token name="LevelOfDetail">0</token>
					<bool name="ManualActivationOnly">false</bool>
					<CoordinateFrame name="ModelMeshCFrame">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<Vector3 name="ModelMeshSize">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="ModelStreamingMode">0</token>
					<string name="Name">Rockin'PinkGuitar</string>
					<bool name="NeedsPivotMigration">false</bool>
					<Ref name="PrimaryPart">null</Ref>
					<bool name="RequiresHandle">true</bool>
					<float name="ScaleFactor">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags" />
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=192462126</url></Content>
					<string name="ToolTip" />
					<OptionalCoordinateFrame name="WorldPivotData">
						<CFrame>
							<X>-1.59000003</X>
							<Y>11.3400002</Y>
							<Z>8.09000015</Z>
							<R00>-0.274351954</R00>
							<R01>0.294481903</R01>
							<R02>0.915429592</R02>
							<R10>-0.504900873</R10>
							<R11>0.76607275</R11>
							<R12>-0.397753239</R12>
							<R20>-0.818416834</R20>
							<R21>-0.5713256</R21>
							<R22>-0.0614893883</R22>
						</CFrame>
					</OptionalCoordinateFrame>
				</Properties>
				<Item class="Part" referent="RBX2E5EDC4A2EB44937BBD49CA5A990726A">
					<Properties>
						<bool name="Anchored">false</bool>
						<BinaryString name="AttributesSerialize" />
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>-1.59000003</X>
							<Y>11.3400002</Y>
							<Z>8.09000015</Z>
							<R00>-0.274351954</R00>
							<R01>0.294481903</R01>
							<R02>0.915429592</R02>
							<R10>-0.504900873</R10>
							<R11>0.76607275</R11>
							<R12>-0.397753239</R12>
							<R20>-0.818416834</R20>
							<R21>-0.5713256</R21>
							<R22>-0.0614893883</R22>
						</CoordinateFrame>
						<bool name="CanCollide">true</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">true</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized" />
						<string name="Name">Handle</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">3</token>
						<token name="shape">1</token>
						<Vector3 name="size">
							<X>4.5</X>
							<Y>5</Y>
							<Z>0.5</Z>
						</Vector3>
					</Properties>
					<Item class="SpecialMesh" referent="RBXBAC0F9EFE9E54BAEAD872E51096BC572">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="MeshId"><url>http://www.roblox.com/asset/?id=192462203</url></Content>
							<token name="MeshType">5</token>
							<string name="Name">Mesh</string>
							<Vector3 name="Offset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<Vector3 name="Scale">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
							<Content name="TextureId"><url>http://www.roblox.com/asset/?id=192462176</url></Content>
							<Vector3 name="VertexColor">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
						</Properties>
					</Item>
				</Item>
				<Item class="LocalScript" referent="RBX1C0645113F2447A78D739F317D5CA2CA">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">LocalScript</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{D83B24AF-F5F2-462D-BF42-4E4B52E8FDD0}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
UserInputService = game:GetService("UserInputService")

Folders = Tool:WaitForChild("Folders")
RemotesFolder = Folders:WaitForChild("Remotes")
ServerControl = RemotesFolder:WaitForChild("ServerControl")
ClientControl = RemotesFolder:WaitForChild("ClientControl")

Animations = {}

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	PlayerMouse = Mouse
	Mouse.Button1Down:connect(function()
		InvokeServer("MouseClick", {Down = true})
	end)
	Mouse.Button1Up:connect(function()
		InvokeServer("MouseClick", {Down = false})
	end)
	for i, v in pairs({KeyDown, KeyUp}) do
		if v then
			v:disconnect()
		end
	end
	KeyDown = UserInputService.InputBegan:connect(function(InputObject)
		local InputType = InputObject.UserInputType
		local KeyCode = InputObject.KeyCode
		if InputType == Enum.UserInputType.Keyboard then
			InvokeServer("KeyPressed", {Key = KeyCode.Name, Down = true})
		end
	end)
	KeyUp = UserInputService.InputEnded:connect(function(InputObject)
		local InputType = InputObject.UserInputType
		local KeyCode = InputObject.KeyCode
		if InputType == Enum.UserInputType.Keyboard then
			InvokeServer("KeyPressed", {Key = KeyCode.Name, Down = false})
		end
	end)
end

function Unequipped()
	for i, v in pairs({KeyDown, KeyUp}) do
		if v then
			v:disconnect()
		end
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX3E924CC180BE41FDAFA142BD7D2B832F">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">Folders</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
					<Item class="Folder" referent="RBX30981C1D37A54EABBB0D6CB1DA32B2C7">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Animations</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
						<Item class="Animation" referent="RBX7ED6E2B23EFD4914AC66A8358E0293AE">
							<Properties>
								<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192906348</url></Content>
								<BinaryString name="AttributesSerialize" />
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">Hold</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags" />
							</Properties>
						</Item>
						<Item class="Animation" referent="RBX586133D7D8264AC4B90366009C970FC5">
							<Properties>
								<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192900081</url></Content>
								<BinaryString name="AttributesSerialize" />
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">Pluck</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags" />
							</Properties>
						</Item>
					</Item>
					<Item class="Folder" referent="RBXF9701CD084A842FCB78E3974335414D6">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Remotes</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
						<Item class="RemoteFunction" referent="RBX7BF930604BE54A7C822ADCFD4B1506BE">
							<Properties>
								<BinaryString name="AttributesSerialize" />
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">ServerControl</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags" />
							</Properties>
						</Item>
						<Item class="RemoteFunction" referent="RBX6C501F665AFC462B81A55E79AB52DA5B">
							<Properties>
								<BinaryString name="AttributesSerialize" />
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">ClientControl</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags" />
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="Script" referent="RBX873A000838A7450089998F10E10FE795">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">Script</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{3C5CF22B-920F-4850-B74D-67F0BB9DD037}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

local function Create_PrivImpl(objectType)
	if type(objectType) ~= 'string' then
		error("Argument of Create must be a string", 2)
	end
	--return the proxy function that gives us the nice Create'string'{data} syntax
	--The first function call is a function call using Lua's single-string-argument syntax
	--The second function call is using Lua's single-table-argument syntax
	--Both can be chained together for the nice effect.
	return function(dat)
		--default to nothing, to handle the no argument given case
		dat = dat or {}

		--make the object to mutate
		local obj = Instance.new(objectType)
		local parent = nil

		--stored constructor function to be called after other initialization
		local ctor = nil

		for k, v in pairs(dat) do
			--add property
			if type(k) == 'string' then
				if k == 'Parent' then
					-- Parent should always be set last, setting the Parent of a new object
					-- immediately makes performance worse for all subsequent property updates.
					parent = v
				else
					obj[k] = v
				end


			--add child
			elseif type(k) == 'number' then
				if type(v) ~= 'userdata' then
					error("Bad entry in Create body: Numeric keys must be paired with children, got a: "..type(v), 2)
				end
				v.Parent = obj


			--event connect
			elseif type(k) == 'table' and k.__eventname then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create.E\'"..k.__eventname.."\']` must have a function value\
							got: "..tostring(v), 2)
				end
				obj[k.__eventname]:connect(v)


			--define constructor function
			elseif k == t.Create then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create]` should be paired with a constructor function, \
							got: "..tostring(v), 2)
				elseif ctor then
					--ctor already exists, only one allowed
					error("Bad entry in Create body: Only one constructor function is allowed", 2)
				end
				ctor = v


			else
				error("Bad entry ("..tostring(k).." =&gt; "..tostring(v)..") in Create body", 2)
			end
		end

		--apply constructor function if it exists
		if ctor then
			ctor(obj)
		end

		if parent then
			obj.Parent = parent
		end

		--return the completed object
		return obj
	end
end

--now, create the functor:
Create = setmetatable({}, {__call = function(tb, ...) return Create_PrivImpl(...) end})

--and create the "Event.E" syntax stub. Really it's just a stub to construct a table which our Create
--function can recognize as special.
Create.E = function(eventName)
	return {__eventname = eventName}
end


Folders = Tool:WaitForChild("Folders")
AnimationsFolder = Folders:WaitForChild("Animations")
RemoteFolder = Folders:WaitForChild("Remotes")

Grips = {
	Hold = CFrame.new(-0.3, 0.35, -0.05, 0.780771196, -0.624816954, -9.65498657e-006, 0.624816895, 0.780771315, 1.2064872e-005, 0, -1.5452506e-005, 1),
	Play = CFrame.new(-1.1, 1.25, -0.1, 0.775343955, -0.196550965, 0.600174427, 0.552064478, 0.672464013, -0.492967427, -0.306702495, 0.713554323, 0.62989974),
	Unequipped = CFrame.new(0.5, -1.25, 0.7, -1, 8.10044585e-005, -1.06224526e-011, 0, 1.31134158e-007, 1, 8.10044585e-005, 1, -1.31134158e-007),
}

Animations = {
	Hold = {Animation = AnimationsFolder:WaitForChild("Hold"), FadeTime = nil, Weight = nil, Speed = nil},
	Pluck = {Animation = AnimationsFolder:WaitForChild("Pluck"), FadeTime = nil, Weight = nil, Speed = 6},
}

NoteData = {
	Chords = {
		{Key = "Z", Sound = {Normal = 99170172, Sharp = 99189531}},
		{Key = "X", Sound = {Normal = 99170311, Sharp = 99189711}},
		{Key = "C", Sound = {Normal = 99170354, Sharp = 99189785}},
		{Key = "V", Sound = {Normal = 99170403, Sharp = 99190216}},
		{Key = "B", Sound = {Normal = 99170481, Sharp = 99189905}},
		{Key = "N", Sound = {Normal = 99170537, Sharp = 99190021}},
		{Key = "M", Sound = {Normal = 99170583, Sharp = 99190550}},
	},
	Pitches = {
		{Key = "G", Pitch = 2},
		{Key = "H", Pitch = 2.25},
		{Key = "J", Pitch = 2.5},
		{Key = "K", Pitch = 2.75},
		{Key = "L", Pitch = 3},
	},
}

Sound = {
	Volume = 0.75,
	Pitch = NoteData.Pitches[3].Pitch,
}

IsPlaying = false
ShiftDown = false
ToolEquipped = false

ServerControl = (RemoteFolder:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = RemoteFolder,
})

ClientControl = (RemoteFolder:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = RemoteFolder,
})

GuitarModule = require(191816425)
GuitarTable = GuitarModule.GetTable({Key = "Guitars"})
GuitarFunctions = GuitarTable.GetData({
	Tool = Tool,
	Communication = {Server = ServerControl, Client = ClientControl},
	KeyData = NoteData,
	UnequippedDisplay = {Enabled = true, Grips = Grips},
	SpecialEnabled = {Enabled = true, AcceptedRatio = 0.75},
})

LightningModule = require(script:WaitForChild("LightningModule"))()

Handle.Transparency = 0
Tool.Grip = Grips.Hold
Tool.Enabled = true

function Activated()
	if not Tool.Enabled or not CheckIfAlive() or not ToolEquipped then
		return
	end
	Tool.Enabled = false
	IsPlaying = not IsPlaying
	if IsPlaying then
		Tool.Grip = Grips.Play
		Spawn(function()
			InvokeClient("PlayAnimation", Animations.Hold)
		end)
	else
		Tool.Grip = Grips.Hold
		for i, v in pairs(Animations) do
			Spawn(function()
				InvokeClient("StopAnimation", v)
			end)
		end
	end
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	if not CheckIfAlive() then
		return
	end
	Tool.Grip = Grips.Hold
	IsPlaying = false
	ShiftDown = false
	ToolEquipped = true
end

function Unequipped()
	IsPlaying = false
	ShiftDown = false
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, Mode, Value)
	if player ~= Player then
		return
	end
	if Mode == "KeyPressed" and Value then
		local Key = Value.Key
		local Down = Value.Down
		if Key == "LeftShift" or Key == "RightShift" then
			ShiftDown = Down
		elseif IsPlaying and Down then
			if NoteData.Chords then
				for i, v in pairs(NoteData.Chords) do
					if string.lower(v.Key) == string.lower(Key) then
						GuitarFunctions.PlaySound({
							Object = Handle,
							Sound = {SoundId = v, ShiftDown = ShiftDown},
							Pitch = (Sound.Pitch or v.Pitch or nil),
							Volume = (Sound.Volume or v.Volume or nil),
						})
						Spawn(function()
							InvokeClient("PlayAnimation", Animations.Pluck)
						end)
						return
					end
				end
			end
			if NoteData.Pitches then
				for i, v in pairs(NoteData.Pitches) do
					if string.lower(v.Key) == string.lower(Key) then
						Sound.Pitch = v.Pitch
						return
					end
				end
			end
		end
	elseif Mode == "IsPlaying" then
		return IsPlaying
	elseif Mode == "SpecialCompleted" and Value then
		local Success = Value.Success
		local SuccessRatio = Value.SuccessRatio
		if Success then
			LightningModule.Strike({
				Player = Player,
				Position = (Handle.CFrame * CFrame.new((Handle.Size.X / 3.5), -(Handle.Size.Y / 3.5), 0)).p,
			})
		end
	end
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
					<Item class="ModuleScript" referent="RBXCCC889931E9243F48982E40B314AFEFE">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null /></Content>
							<string name="Name">LightningModule</string>
							<string name="ScriptGuid">{5D2FEB84-C0BC-4DB4-AB67-C797504AC9E5}</string>
							<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

BasePart = Create("Part"){
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	TopSurface = Enum.SurfaceType.SmoothNoOutlines,
	BottomSurface = Enum.SurfaceType.SmoothNoOutlines,
	FrontSurface = Enum.SurfaceType.SmoothNoOutlines,
	BackSurface = Enum.SurfaceType.SmoothNoOutlines,
	LeftSurface = Enum.SurfaceType.SmoothNoOutlines,
	RightSurface = Enum.SurfaceType.SmoothNoOutlines,
	Locked = true,
	CanCollide = true,
	Anchored = false,
}

LightningRadius = 60

Rate = (1 / 60)

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function GetTotalParts(MaxParts, PossibleParts, Parts)
	if MaxParts &lt; PossibleParts then
		return MaxParts
	elseif Parts &gt;= MaxParts then
		return 0
	elseif MaxParts &gt;= PossibleParts then
		local PartCount = (MaxParts - PossibleParts)
		if Parts &lt;= MaxParts then
			PartCount = (MaxParts - Parts)
			if PartCount &gt; PossibleParts then
				return PossibleParts
			else
				return PartCount
			end
		elseif PartCount &gt;= PossibleParts then
			return PossibleParts
		else
			return PartCount
		end
	end
end

function GetParts(Region, MaxParts, Ignore)
	local Parts = {}
	local RerunFailed = false
	while #Parts &lt; MaxParts and not RerunFailed do
		local Region = Region
		local PossibleParts = GetTotalParts(MaxParts, 100, #Parts)
		local PartsNearby = game:GetService("Workspace"):FindPartsInRegion3WithIgnoreList(Region, Ignore, PossibleParts)
		if #PartsNearby == 0 then
			RerunFailed = true
		else
			for i, v in pairs(PartsNearby) do
				table.insert(Parts, v)
				table.insert(Ignore, v)
			end
		end
	end
	return Parts
end

function CheckTableForInstance(Table, Instance)
	for i, v in pairs(Table) do
		if v == Instance then
			return true
		end
	end
	return false
end

function GetPlayersNearby(Player, Position, Radius)
	local NegativeRegion = (Position - Vector3.new(Radius, Radius, Radius))
	local PositiveRegion = (Position + Vector3.new(Radius, Radius, Radius))
	local Region = Region3.new(NegativeRegion, PositiveRegion)
	local IgnoreList = {((Player and Player.Character) or nil)}
	for i, v in pairs(Players:GetChildren()) do
		if v:IsA("Player") and v ~= Player and v.Character and v.Character.Parent and IsTeamMate(Player, v) then
			table.insert(IgnoreList, v.Character)
		end
	end
	local Parts = GetParts(Region, 500, IgnoreList)
	local Humanoids = {}
	for i, v in pairs(Parts) do
		local character = v.Parent
		if character:IsA("Hat") then
			character = character.Parent
		end
		local humanoid = character:FindFirstChild("Humanoid")
		local torso = character:FindFirstChild("Torso")
		if humanoid and humanoid.Health &gt; 0 and torso and not CheckTableForInstance(Humanoids, humanoid) then
			table.insert(Humanoids, humanoid)
		end
	end
	return Humanoids
end

function GetLightning()

	local function LightningStrike(Source, Destination)
		local MaxSegLength = 7
		local MinSegLength = 3
		local MaxOffset = 4
		local Direction = (Destination - Source).unit
		local Distance = (Source - Destination).magnitude

		local Points = {}
		Points[1] = Source
		local LastDist = 0

		while (Distance - LastDist) &gt; MaxSegLength do
			LastDist = (LastDist + ((math.random() * (MaxSegLength - MinSegLength)) + MinSegLength))
			local NewVector = (Source + (LastDist * Direction) + Vector3.new(math.random(), math.random(), math.random()))
			table.insert(Points, NewVector)
			wait(Rate)
		end
		table.insert(Points, Destination)

		local Parts = {}

		local LightningModel = Create("Model"){
			Name = "LightningModel",
		}
		Debris:AddItem(LightningModel, 3)
		LightningModel.Parent = game:GetService("Workspace")

		for i, v in pairs(Points) do
			local LastPart = BasePart:Clone()
			LastPart.BrickColor = BrickColor.new("Hot pink")
			LastPart.Transparency = 0.3
			LastPart.Anchored = true
			LastPart.CanCollide = false
			for i, v in pairs({"Front", "Back", "Left", "Right", "Top", "Bottom"}) do
				local Light = Instance.new("SurfaceLight")
				Light.Face = Enum.NormalId[v]
				Light.Range = 4
				Light.Brightness = 100
				Light.Color = LastPart.BrickColor.Color
				Light.Enabled = true
				Light.Parent = LastPart
			end
			local Mesh = Create("CylinderMesh"){
				Scale = Vector3.new(0.5, 1, 0.5),
				Parent = LastPart,
			}
			if Points[i + 1] then
				LastPart.Size = Vector3.new(0.5, (v - Points[i + 1]).magnitude, 0.5)
				LastPart.CFrame = CFrame.new(((v + Points[i + 1]) / 2), Points[i + 1]) * CFrame.Angles((math.pi / 2), 0, 0)
				Debris:AddItem(LastPart, 1)
				LastPart.Parent = LightningModel
				wait(Rate)
			end
		end
	end

	local function DoLightning(Position, HitPlayers, Player)
		local humanoids = GetPlayersNearby(Player, Position, LightningRadius)
		for i, v in pairs(humanoids) do
			local character = v.Parent
			local torso = character:FindFirstChild("Torso")
			if v and v.Health &gt; 0 and torso then
				Spawn(function()
					LightningStrike(Position, torso.Position)
				end)
				HitPlayers[character] = true
				v:TakeDamage(100)
				DoLightning(Position, HitPlayers, Player)
				return true
			end
		end
		return false
	end

	local function Strike(Table)
		if not Table then
			return
		end
		local Position = Table.Position
		local Player = Table.Player
		if not Position or not Player then
			return
		end
		local HitPlayers = {}
		--if not DoLightning(Position, HitPlayers, Player) then
			for i = 1, math.random(8, 25), 1 do
				Spawn(function()
					LightningStrike(Position, (Position + (Vector3.new(((math.random() - 0.5) * 2), ((math.random() - 0.5) * 2),((math.random() - 0.5) * 2)) * 45)))
				end)
			end
		--end
	end

	return {
		LightningStrike = LightningStrike,
		DoLightning = DoLightning,
		Strike = Strike,
	}

end

return GetLightning</ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
					</Item>
				</Item>
				<Item class="Camera" referent="RBXF5DF3B2B14114A8E83CB56BAB586EAB8">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<CoordinateFrame name="CFrame">
							<X>-5.23936319</X>
							<Y>12.9821367</Y>
							<Z>11.4425554</Z>
							<R00>0.669060707</R00>
							<R01>0.236490205</R01>
							<R02>-0.704578102</R02>
							<R10>-0</R10>
							<R11>0.948023081</R11>
							<R12>0.318201989</R12>
							<R20>0.743207812</R20>
							<R21>-0.212896451</R21>
							<R22>0.634284914</R22>
						</CoordinateFrame>
						<Ref name="CameraSubject">null</Ref>
						<token name="CameraType">0</token>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<float name="FieldOfView">70</float>
						<token name="FieldOfViewMode">0</token>
						<CoordinateFrame name="Focus">
							<X>-3.83020687</X>
							<Y>12.3457327</Y>
							<Z>10.1739855</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="HeadLocked">true</bool>
						<float name="HeadScale">1</float>
						<string name="Name">ThumbnailCamera</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<bool name="VRTiltAndRollEnabled">false</bool>
					</Properties>
				</Item>
			</Item>
		</Item>
		