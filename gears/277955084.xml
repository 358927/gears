<Item class="Model" referent="RBX104639DDE002483DA138146CA44EA152">
			<Properties>
				<BinaryString name="AttributesSerialize" />
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<token name="LevelOfDetail">0</token>
				<CoordinateFrame name="ModelMeshCFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
				<Vector3 name="ModelMeshSize">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="ModelStreamingMode">0</token>
				<string name="Name">277955084</string>
				<bool name="NeedsPivotMigration">false</bool>
				<Ref name="PrimaryPart">null</Ref>
				<float name="ScaleFactor">1</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags" />
				<OptionalCoordinateFrame name="WorldPivotData" />
			</Properties>
			<Item class="Tool" referent="RBX18DDED2F59194F79B9B1C13B9148EC07">
				<Properties>
					<BinaryString name="AttributesSerialize" />
					<bool name="CanBeDropped">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="Enabled">true</bool>
					<CoordinateFrame name="Grip">
						<X>1.5</X>
						<Y>-1.20000005</Y>
						<Z>-1.22500002</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<token name="LevelOfDetail">0</token>
					<bool name="ManualActivationOnly">false</bool>
					<CoordinateFrame name="ModelMeshCFrame">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<Vector3 name="ModelMeshSize">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="ModelStreamingMode">0</token>
					<string name="Name">LaserGlasses</string>
					<bool name="NeedsPivotMigration">false</bool>
					<Ref name="PrimaryPart">null</Ref>
					<bool name="RequiresHandle">true</bool>
					<float name="ScaleFactor">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags" />
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=272535628</url></Content>
					<string name="ToolTip" />
					<OptionalCoordinateFrame name="WorldPivotData">
						<CFrame>
							<X>-11.1524706</X>
							<Y>28.2250004</Y>
							<Z>-6.79351044</Z>
							<R00>-0.317789465</R00>
							<R01>8.94069672e-08</R01>
							<R02>0.948161483</R02>
							<R10>2.55050367e-07</R10>
							<R11>0.99999994</R11>
							<R12>0</R12>
							<R20>-0.948161602</R20>
							<R21>2.5331974e-07</R21>
							<R22>-0.317789465</R22>
						</CFrame>
					</OptionalCoordinateFrame>
				</Properties>
				<Item class="Part" referent="RBXE0541F6EFFC3447EA9AD117951C64064">
					<Properties>
						<bool name="Anchored">false</bool>
						<BinaryString name="AttributesSerialize" />
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>-11.1524706</X>
							<Y>28.2250004</Y>
							<Z>-6.79351044</Z>
							<R00>-0.317789465</R00>
							<R01>8.94069672e-08</R01>
							<R02>0.948161483</R02>
							<R10>2.55050367e-07</R10>
							<R11>0.99999994</R11>
							<R12>0</R12>
							<R20>-0.948161602</R20>
							<R21>2.5331974e-07</R21>
							<R22>-0.317789465</R22>
						</CoordinateFrame>
						<bool name="CanCollide">true</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">true</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized" />
						<string name="Name">Handle</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">3</token>
						<token name="shape">1</token>
						<Vector3 name="size">
							<X>1.39999998</X>
							<Y>0.375</Y>
							<Z>0.850000024</Z>
						</Vector3>
					</Properties>
					<Item class="SpecialMesh" referent="RBXF480DF79A7B94128BB907EDCE0388768">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="MeshId"><url>http://www.roblox.com/asset/?id=272535025</url></Content>
							<token name="MeshType">5</token>
							<string name="Name">Mesh</string>
							<Vector3 name="Offset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<Vector3 name="Scale">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
							<Content name="TextureId"><url>http://www.roblox.com/asset/?id=272535101</url></Content>
							<Vector3 name="VertexColor">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
						</Properties>
					</Item>
					<Item class="Sound" referent="RBXFD1E292834AA420DA3320135521D9273">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="IsMutedForCapture">false</bool>
							<NumberRange name="LoopRegion">0 60000 </NumberRange>
							<bool name="Looped">true</bool>
							<string name="Name">LaserSound</string>
							<bool name="PlayOnRemove">false</bool>
							<NumberRange name="PlaybackRegion">0 60000 </NumberRange>
							<bool name="PlaybackRegionsEnabled">false</bool>
							<float name="PlaybackSpeed">1</float>
							<bool name="Playing">false</bool>
							<float name="RollOffMaxDistance">10000</float>
							<float name="RollOffMinDistance">10</float>
							<token name="RollOffMode">0</token>
							<Ref name="SoundGroup">null</Ref>
							<Content name="SoundId"><url>http://www.roblox.com/asset/?id=115327352</url></Content>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
							<double name="TimePosition">0</double>
							<float name="Volume">0.739684403</float>
						</Properties>
					</Item>
				</Item>
				<Item class="Animation" referent="RBXEA92598D592948159E9C9B1FC61ECB5E">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=158821881</url></Content>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">Pose</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBXC111723D6FF94525B5CFD7EB44D33267">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">MouseIcon</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{DBE0B06F-F556-4516-A54E-C211BD38E0A1}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBX8DE62FDA3F2143C99AED779933B4B9EA">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">LocalScript</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{34D537EB-4B2B-4397-B534-30BB86C0FEA1}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")

Animations = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

InputCheck = Instance.new("ScreenGui")
InputCheck.Name = "InputCheck"
InputButton = Instance.new("ImageButton")
InputButton.Name = "InputButton"
InputButton.Image = ""
InputButton.BackgroundTransparency = 1
InputButton.ImageTransparency = 1
InputButton.Size = UDim2.new(1, 0, 1, 0)
InputButton.Parent = InputCheck

Rate = (1 / 60)

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop(value.FadeTime)
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		PlayerMouse = Mouse
		Mouse.Button1Down:connect(function()
			InvokeServer("Button1Click", {Down = true})
		end)
		Mouse.Button1Up:connect(function()
			InvokeServer("Button1Click", {Down = false})
		end)
		Mouse.KeyDown:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = true})
		end)
		Mouse.KeyUp:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = false})
		end)
		local PlayerGui = Player:FindFirstChild("PlayerGui")
		if PlayerGui then
			if UserInputService.TouchEnabled then
				InputCheckClone = InputCheck:Clone()
				InputCheckClone.InputButton.InputBegan:connect(function()
					InvokeServer("Button1Click", {Down = true})
				end)
				InputCheckClone.InputButton.InputEnded:connect(function()
					InvokeServer("Button1Click", {Down = false})
				end)
				InputCheckClone.Parent = PlayerGui
			end
		end
	end)
end

function Unequipped()
	if InputCheckClone and InputCheckClone.Parent then
		InputCheckClone:Destroy()
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	pcall(function()
		local ServerReturn = ServerControl:InvokeServer(mode, value)
		return ServerReturn
	end)
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Hit = PlayerMouse.Hit, Target = PlayerMouse.Target}) or nil)
	elseif mode == "SetMouse" then
		pcall(function()
			PlayerMouse[value.Property] = value.Value
		end)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="Camera" referent="RBX2F976B44BAFF43E4A0DA64C30D9AD489">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<CoordinateFrame name="CFrame">
							<X>-13.3014679</X>
							<Y>28.9629498</Y>
							<Z>-4.98190546</Z>
							<R00>0.650223851</R00>
							<R01>0.216222301</R01>
							<R02>-0.728324711</R02>
							<R10>-0</R10>
							<R11>0.958646536</R11>
							<R12>0.284599394</R12>
							<R20>0.759742677</R20>
							<R21>-0.185053319</R21>
							<R22>0.623334825</R22>
						</CoordinateFrame>
						<Ref name="CameraSubject">null</Ref>
						<token name="CameraType">0</token>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<float name="FieldOfView">30</float>
						<token name="FieldOfViewMode">0</token>
						<CoordinateFrame name="Focus">
							<X>-11.6554747</X>
							<Y>28.3197632</Y>
							<Z>-6.39062452</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="HeadLocked">true</bool>
						<float name="HeadScale">1</float>
						<string name="Name">ThumbnailCamera</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<bool name="VRTiltAndRollEnabled">false</bool>
					</Properties>
				</Item>
				<Item class="Script" referent="RBXCB94506D04B5443AA27FA7375135D5CB">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">Script</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{A91685A5-E526-4F33-A774-8E952A5BBCA1}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

local function Create_PrivImpl(objectType)
	if type(objectType) ~= 'string' then
		error("Argument of Create must be a string", 2)
	end
	--return the proxy function that gives us the nice Create'string'{data} syntax
	--The first function call is a function call using Lua's single-string-argument syntax
	--The second function call is using Lua's single-table-argument syntax
	--Both can be chained together for the nice effect.
	return function(dat)
		--default to nothing, to handle the no argument given case
		dat = dat or {}

		--make the object to mutate
		local obj = Instance.new(objectType)
		local parent = nil

		--stored constructor function to be called after other initialization
		local ctor = nil

		for k, v in pairs(dat) do
			--add property
			if type(k) == 'string' then
				if k == 'Parent' then
					-- Parent should always be set last, setting the Parent of a new object
					-- immediately makes performance worse for all subsequent property updates.
					parent = v
				else
					obj[k] = v
				end


			--add child
			elseif type(k) == 'number' then
				if type(v) ~= 'userdata' then
					error("Bad entry in Create body: Numeric keys must be paired with children, got a: "..type(v), 2)
				end
				v.Parent = obj


			--event connect
			elseif type(k) == 'table' and k.__eventname then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create.E\'"..k.__eventname.."\']` must have a function value\
							got: "..tostring(v), 2)
				end
				obj[k.__eventname]:connect(v)


			--define constructor function
			elseif k == t.Create then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create]` should be paired with a constructor function, \
							got: "..tostring(v), 2)
				elseif ctor then
					--ctor already exists, only one allowed
					error("Bad entry in Create body: Only one constructor function is allowed", 2)
				end
				ctor = v


			else
				error("Bad entry ("..tostring(k).." =&gt; "..tostring(v)..") in Create body", 2)
			end
		end

		--apply constructor function if it exists
		if ctor then
			ctor(obj)
		end

		if parent then
			obj.Parent = parent
		end

		--return the completed object
		return obj
	end
end

--now, create the functor:
Create = setmetatable({}, {__call = function(tb, ...) return Create_PrivImpl(...) end})

--and create the "Event.E" syntax stub. Really it's just a stub to construct a table which our Create
--function can recognize as special.
Create.E = function(eventName)
	return {__eventname = eventName}
end


Functions = require(script:WaitForChild("Functions"))

LaserModelRemoval = script:WaitForChild("LaserModelRemoval")

Animations = {
	Pose = {Animation = Tool:WaitForChild("Pose"), FadeTime = nil, Weight = nil, Speed = nil},
}

Sounds = {
	LaserSound = Handle:WaitForChild("LaserSound"),
}

Damage = 5
ReloadTime = 0.1
NeckChangedConnections = {}

PartName = "Glasses"

FireRate = 0.1
LaserRange = 50
LaserOffset = 1

MouseDown = false
ToolEquipped = false

ServerControl = (Tool:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Tool,
})

ClientControl = (Tool:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Tool,
})

Handle.Transparency = 0
Tool.Enabled = true

function CastLaser(StartPosition, Direction, MaxDistance, Ignore, Color)
	local LaserModelName = (Player.Name .. "_LaserModel")
	local LaserModel = game:GetService("Workspace"):FindFirstChild(LaserModelName)
	if not LaserModel then
		LaserModel = Create("Model"){
			Name = LaserModelName,
		}
		local LaserModelRemovalClone = LaserModelRemoval:Clone()
		LaserModelRemovalClone.Disabled = false
		LaserModelRemovalClone.Parent = LaserModel
		LaserModel.Parent = game:GetService("Workspace")
	end
	table.insert(Ignore, LaserModel)
	local Hit, EndPosition, Normal = Functions.CastRay(StartPosition, Direction, MaxDistance, Ignore, false)
	local Distance = (StartPosition - EndPosition).magnitude
	local LaserPart = Create("Part"){
		Name = "Laser",
		BrickColor = BrickColor.new(Color),
		Transparency = 0.5,
		Shape = Enum.PartType.Block,
		FormFactor = Enum.FormFactor.Custom,
		TopSurface = Enum.SurfaceType.Smooth,
		BottomSurface = Enum.SurfaceType.Smooth,
		Material = Enum.Material.Neon,
		CanCollide = false,
		Anchored = true,
		Locked = true,
		Size = Vector3.new(0.2, Distance, 0.2),
		Create("CylinderMesh"){
			VertexColor = Vector3.new(1, 1, 1),
			Scale = Vector3.new(1, 1, 1),
		}
	}
	for i, v in pairs({"Top", "Bottom", "Left", "Right", "Front", "Back"}) do
		local Light = Create("SurfaceLight"){
			Brightness = 100,
			Range = 4,
			Angle = 90,
			Color = BrickColor.new(Color).Color,
			Face = Enum.NormalId[v],
			Shadows = false,
			Enabled = true,
			Parent = LaserPart,
		}
	end
	Debris:AddItem(LaserPart, 1)
	LaserPart.Parent = LaserModel

	LaserPart.CFrame = ((CFrame.new(StartPosition, EndPosition) * CFrame.new(0, 0, (-Distance / 2))) * CFrame.Angles((math.pi / 2), 0, 0))
	Spawn(function()
		InvokeClient("SetMouse", {Property = "TargetFilter", Value = game:GetService("Workspace"):FindFirstChild(LaserModelName)})
	end)
	Spawn(function()
		for i = 1, 20 do
			wait(0.05)
			LaserPart.Transparency = (LaserPart.Transparency + 0.05)
		end
	end)
	return Hit, EndPosition
end

function StopLaser()
	Sounds.LaserSound:Stop()
	MouseDown = false
	if Neck and Neck.Parent then
		Neck.C1 = NeckOrigin
	end
end

function FireLaser(Mouse)
	IgnoreHeadChange = true
	local LastHeadRotation = Neck.C1
	Neck.C1 = NeckOrigin
	local HeadOrigin = Head:Clone()
	local Base = Neck.Part0.Position + (Neck.C0.p * 1)
	local YVector = (Mouse.Hit.p + Mouse.Hit.lookVector)
	local Set = CFrame.new(Base, YVector)
	local Offset = Set:toObjectSpace(Torso.CFrame * Neck.C0)
	local PosX, PosY, PosZ, R00, R01, R02, R10, R11, R12, R20, R21, R22 = Offset:components()
	Neck.C1 = CFrame.new(NeckOrigin.p.x, NeckOrigin.p.y, NeckOrigin.p.z, R00, R01, R02, R10, R11, R12, R20, R21, R22)
	local HeadRotationCheck = false
	if math.abs((Head.Position - Torso.Position).magnitude) &gt;= 1.25 then
		HeadRotationCheck = true
	else
		Neck.C1 = LastHeadRotation
	end
	IgnoreHeadChange = false
	if HeadRotationCheck and (math.acos((Mouse.Hit.p - HeadOrigin.Position).Unit:Dot(HeadOrigin.CFrame.lookVector)) &lt;= (math.pi / 2)) then
		for i, v in pairs(NeckChangedConnections) do
			v:disconnect()
		end
		NeckChangedConnections = {}
		Spawn(function()
			Tool.Enabled = false
			Sounds.LaserSound:Play()
			local NewLaserOffset = (LaserOffset * 100)
			local TargetPoint = (Mouse.Hit.p + Vector3.new((math.random(-NewLaserOffset, NewLaserOffset) * 0.01), (math.random(-NewLaserOffset, NewLaserOffset) * 0.01), (math.random(-NewLaserOffset, NewLaserOffset) * 0.01)))
			for i = 1, 2 do
				local SpawnPos = (Glasses.CFrame * CFrame.new((0.35 * ((i == 1 and 1) or -1)), -0.1, -0.375))
				local Hit, EndPosition = CastLaser(SpawnPos.p, (TargetPoint - SpawnPos.p).Unit, LaserRange, {Character}, "Really red")
				if Hit and Hit.Parent then
					local character = Hit.Parent
					if character:IsA("Hat") then
						character = character.Parent
					end
					if character and character ~= Character then
						local humanoid = character:FindFirstChild("Humanoid")
						if humanoid and humanoid.Health &gt; 0 then
							local player = Players:GetPlayerFromCharacter(character)
							if (not player or (player and not Functions.IsTeamMate(Player, player))) then
								Functions.UntagHumanoid(humanoid)
								Functions.TagHumanoid(humanoid, Player)
								humanoid:TakeDamage(Damage)
							end
						end
					end
				end
			end
			wait(ReloadTime)
			Tool.Enabled = true
		end)
		local NeckChanged
		NeckChanged = Neck.Changed:connect(function(Property)
			if Property == "C0" or Property == "C1" and not IgnoreHeadChange then
				for i, v in pairs(NeckChangedConnections) do
					v:disconnect()
				end
				NeckChangedConnections = {}
			end
		end)
		table.insert(NeckChangedConnections, NeckChanged)
		Delay(1, function()
			if NeckChanged.connected then
				Neck.C1 = NeckOrigin
				StopLaser()
			end
		end)
	else
		IgnoreHeadChange = true
		Neck.C1 = LastHeadRotation
		IgnoreHeadChange = false
	end
end

function CreateGlasses(CreateNew)
	for i, v in pairs(Character:GetChildren()) do
		if v:IsA("BasePart") and v.Name == PartName then
			v:Destroy()
		end
	end
	Handle.Transparency = 0
	if not CreateNew then
		return
	end
	Handle.Transparency = 1
	Glasses = Handle:Clone()
	Glasses.Name = PartName
	Glasses.Transparency = 0
	Glasses.CanCollide = false
	local GlassesWeld = Create("Weld"){
		Part0 = Head,
		Part1 = Glasses,
		C0 = CFrame.new(0, -1, 0, 1, 0, -0, 0, 0, 1, 0, -1, -0),
		C1 = ((Tool.Grip + Vector3.new(-1.5, 0, 1.5)) * CFrame.Angles(-(math.pi / 2), 0, 0)),
		Parent = Glasses,
	}
	Glasses.Parent = Character
end

function Activated()
	if not Tool.Enabled or not CheckIfAlive() or MouseDown then
		return
	end
	MouseDown = true
	Spawn(function()
		while ToolEquipped and MouseDown and CheckIfAlive() do
			Sounds.LaserSound.Volume = (((math.sin(tick() * 3) + 1) * 0.25) + 0.25)
			Spawn(function()
				local MouseData = InvokeClient("MousePosition")
				if MouseData then
					FireLaser(MouseData)
				end
			end)
			wait(FireRate)
		end
		Sounds.LaserSound:Stop()
	end)
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Torso and Torso.Parent and Neck and Neck.Parent and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Head = Character:FindFirstChild("Head")
	Torso = Character:FindFirstChild("Torso")
	Neck = Torso:FindFirstChild("Neck")
	NeckOrigin = Neck.C1
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		InvokeClient("PlayAnimation", Animations.Pose)
	end)
	Spawn(function()
		CreateGlasses(true)
	end)
	MouseDown = false
	ToolEquipped = true
end

function Unequipped()
	Handle.Transparency = 0
	StopLaser()
	CreateGlasses(false)
	MouseDown = false
	ToolEquipped = false
end

function OnServerInvoke(player, mode, value)
	if player ~= Player or not ToolEquipped or not value or not CheckIfAlive() then
		return
	end
	if mode == "Button1Click" then
		local Down = value.Down
		if not Down then
			MouseDown = false
		end
	end
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
					<Item class="Script" referent="RBXF6E8A84278014F949337CC0E002DC06B">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null /></Content>
							<string name="Name">LaserModelRemoval</string>
							<token name="RunContext">0</token>
							<string name="ScriptGuid">{F0FF72AF-7387-4039-A4F3-61D251E4086E}</string>
							<ProtectedString name="Source">--Made by Luckymaxer

Model = script.Parent

Debris = game:GetService("Debris")

FadeRate = 0.025
Rate = (1 / 15)

Removing = false

function RemoveModel()
	if Removing then
		return
	end
	local Parts = {}
	for i, v in pairs(Model:GetChildren()) do
		if v:IsA("BasePart") then
			table.insert(Parts, v)
		end
	end
	if #Parts == 0 then
		Removing = true
		Model.Name = ""
		Debris:AddItem(Model, 0.5)
	end
end

Model.ChildRemoved:connect(function(Child)
	RemoveModel()
end)

wait(1)

RemoveModel()</ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX2D9814BBBA3241259F873312A08E28A5">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null /></Content>
							<string name="Name">Functions</string>
							<string name="ScriptGuid">{0062A9DB-7CF3-4779-9A4B-4BDF89BA9C2B}</string>
							<ProtectedString name="Source">--Made by Luckymaxer

Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Functions = {

	CheckTableForString = (function(Table, String)
		for i, v in pairs(Table) do
			if string.lower(v) == string.lower(String) then
				return true
			end
		end
		return false
	end),

	CheckIntangible = (function(Hit)
		local ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Ray", "Bullet", "ParticlePart"}
		if Hit and Hit.Parent then
			local Character = Hit.Parent
			local Humanoid = Character:FindFirstChild("Humanoid")
			if Humanoid or Character:IsA("Hat") or Character:IsA("Tool") then
				return false
			end
			if (Hit.Transparency &gt;= 1 and not Hit.CanCollide) or Functions.CheckTableForString(ProjectileNames, Hit.Name) then
				return true
			end
		end
		return false
	end),

	CastRay = (function(StartPos, Vec, Length, Ignore, DelayIfHit)
		local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
		if RayHit and Functions.CheckIntangible(RayHit) then
			if DelayIfHit then
				wait()
			end
			RayHit, RayPos, RayNormal = Functions.CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).Magnitude)), Ignore, DelayIfHit)
		end
		return RayHit, RayPos, RayNormal
	end),

	TagHumanoid = (function(humanoid, player)
		local Creator_Tag = Create("ObjectValue"){
			Name = "creator",
			Value = player,
		}
		local NoTransform = Create("BoolValue"){
			Name = "NoTransform",
			Value = true,
			Parent = Creator_Tag,
		}
		Debris:AddItem(Creator_Tag, 2)
		Creator_Tag.Parent = humanoid
	end),

	UntagHumanoid = (function(humanoid)
		for i, v in pairs(humanoid:GetChildren()) do
			if v:IsA("ObjectValue") and v.Name == "creator" then
				v:Destroy()
			end
		end
	end),

	IsTeamMate = (function(Player1, Player2)
		return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
	end),

}

return Functions</ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
		