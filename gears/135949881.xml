<Item class="Model" referent="RBX13159CB304E242D7B159090D65F3AF4A">
			<Properties>
				<BinaryString name="AttributesSerialize" />
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<token name="LevelOfDetail">0</token>
				<CoordinateFrame name="ModelMeshCFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
				<Vector3 name="ModelMeshSize">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="ModelStreamingMode">0</token>
				<string name="Name">135949881</string>
				<bool name="NeedsPivotMigration">false</bool>
				<Ref name="PrimaryPart">null</Ref>
				<float name="ScaleFactor">1</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags" />
				<OptionalCoordinateFrame name="WorldPivotData" />
			</Properties>
			<Item class="Tool" referent="RBX1F45043FFF114B8580C77F8AE264653E">
				<Properties>
					<BinaryString name="AttributesSerialize" />
					<bool name="CanBeDropped">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="Enabled">true</bool>
					<CoordinateFrame name="Grip">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<token name="LevelOfDetail">0</token>
					<bool name="ManualActivationOnly">false</bool>
					<CoordinateFrame name="ModelMeshCFrame">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<Vector3 name="ModelMeshSize">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="ModelStreamingMode">0</token>
					<string name="Name">HatchedWalkingWithDinosaursSuperEgg</string>
					<bool name="NeedsPivotMigration">false</bool>
					<Ref name="PrimaryPart">null</Ref>
					<bool name="RequiresHandle">true</bool>
					<float name="ScaleFactor">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags" />
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=135564438</url></Content>
					<string name="ToolTip" />
					<OptionalCoordinateFrame name="WorldPivotData">
						<CFrame>
							<X>1.52000797</X>
							<Y>3.1884439</Y>
							<Z>2.79999995</Z>
							<R00>1</R00>
							<R01>-1.28136491e-18</R01>
							<R02>2.70646879e-19</R02>
							<R10>1.28136491e-18</R10>
							<R11>1</R11>
							<R12>-1.67646949e-18</R12>
							<R20>-2.70646879e-19</R20>
							<R21>1.67646949e-18</R21>
							<R22>1</R22>
						</CFrame>
					</OptionalCoordinateFrame>
				</Properties>
				<Item class="Part" referent="RBX0E986142624B4AEEA26FEB44DD84CB4D">
					<Properties>
						<bool name="Anchored">false</bool>
						<BinaryString name="AttributesSerialize" />
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>1.52000797</X>
							<Y>3.1884439</Y>
							<Z>2.79999995</Z>
							<R00>1</R00>
							<R01>-1.28136491e-18</R01>
							<R02>2.70646879e-19</R02>
							<R10>1.28136491e-18</R10>
							<R11>1</R11>
							<R12>-1.67646949e-18</R12>
							<R20>-2.70646879e-19</R20>
							<R21>1.67646949e-18</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">true</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4294112243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">true</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized" />
						<string name="Name">Handle</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">0</token>
						<token name="shape">0</token>
						<Vector3 name="size">
							<X>2</X>
							<Y>2</Y>
							<Z>2</Z>
						</Vector3>
					</Properties>
					<Item class="SpecialMesh" referent="RBXB23C107290C14BFDACA1B712A9A0E19B">
						<Properties>
							<BinaryString name="AttributesSerialize" />
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="MeshId"><url>http://www.roblox.com/asset/?id=139110864</url></Content>
							<token name="MeshType">5</token>
							<string name="Name">Mesh</string>
							<Vector3 name="Offset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<Vector3 name="Scale">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags" />
							<Content name="TextureId"><url>http://www.roblox.com/asset/?id=139111862</url></Content>
							<Vector3 name="VertexColor">
								<X>1</X>
								<Y>1</Y>
								<Z>1</Z>
							</Vector3>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBXF7E4DFFEC44C4A36940374D80014BDC3">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">Script</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{F8AD77CC-D0BD-4BE1-B42B-1479AD081365}</string>
						<ProtectedString name="Source">--Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

local function Create_PrivImpl(objectType)
	if type(objectType) ~= 'string' then
		error("Argument of Create must be a string", 2)
	end
	--return the proxy function that gives us the nice Create'string'{data} syntax
	--The first function call is a function call using Lua's single-string-argument syntax
	--The second function call is using Lua's single-table-argument syntax
	--Both can be chained together for the nice effect.
	return function(dat)
		--default to nothing, to handle the no argument given case
		dat = dat or {}

		--make the object to mutate
		local obj = Instance.new(objectType)
		local parent = nil

		--stored constructor function to be called after other initialization
		local ctor = nil

		for k, v in pairs(dat) do
			--add property
			if type(k) == 'string' then
				if k == 'Parent' then
					-- Parent should always be set last, setting the Parent of a new object
					-- immediately makes performance worse for all subsequent property updates.
					parent = v
				else
					obj[k] = v
				end


			--add child
			elseif type(k) == 'number' then
				if type(v) ~= 'userdata' then
					error("Bad entry in Create body: Numeric keys must be paired with children, got a: "..type(v), 2)
				end
				v.Parent = obj


			--event connect
			elseif type(k) == 'table' and k.__eventname then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create.E\'"..k.__eventname.."\']` must have a function value\
							got: "..tostring(v), 2)
				end
				obj[k.__eventname]:connect(v)


			--define constructor function
			elseif k == t.Create then
				if type(v) ~= 'function' then
					error("Bad entry in Create body: Key `[Create]` should be paired with a constructor function, \
							got: "..tostring(v), 2)
				elseif ctor then
					--ctor already exists, only one allowed
					error("Bad entry in Create body: Only one constructor function is allowed", 2)
				end
				ctor = v


			else
				error("Bad entry ("..tostring(k).." =&gt; "..tostring(v)..") in Create body", 2)
			end
		end

		--apply constructor function if it exists
		if ctor then
			ctor(obj)
		end

		if parent then
			obj.Parent = parent
		end

		--return the completed object
		return obj
	end
end

--now, create the functor:
Create = setmetatable({}, {__call = function(tb, ...) return Create_PrivImpl(...) end})

--and create the "Event.E" syntax stub. Really it's just a stub to construct a table which our Create
--function can recognize as special.
Create.E = function(eventName)
	return {__eventname = eventName}
end


BaseUrl = "http://www.roblox.com/asset/?id="

BasePart = Create("Part"){
	Material = Enum.Material.Plastic,
	FormFactor = Enum.FormFactor.Custom,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
}

MaxChargeRange = 100
MaxWayPoints = 5
MaxJumpDistance = 100
JumpBackDist = 5
ChargeDamage = 50

ToolEquipped = false

Handle.Transparency = 0
Tool.Enabled = true

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function TagHumanoid(humanoid, player)
	local Creator_Tag = Create("ObjectValue"){
		Name = "creator",
		Value = player,
	}
	Debris:AddItem(Creator_Tag, 2)
	Creator_Tag.Parent = humanoid
end

function UntagHumanoid(humanoid)
	for i, v in pairs(humanoid:GetChildren()) do
		if v:IsA("ObjectValue") and v.Name == "creator" then
			v:Destroy()
		end
	end
end

function CheckTableForString(Table, String)
	for i, v in pairs(Table) do
		if string.find(string.lower(String), string.lower(v)) then
			return true
		end
	end
	return false
end

function CheckIntangible(Hit)
	local ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Bullet"}
	if Hit and Hit.Parent then
		if ((not Hit.CanCollide or CheckTableForString(ProjectileNames, Hit.Name)) and not Hit.Parent:FindFirstChild("Humanoid")) then
			return true
		end
	end
	return false
end

-- @preconditions: vec should be a unit vector, and 0 &lt; rayLength &lt;= 1000
function CastRay(startPos, vec, rayLength)
	local Ignore = {Character}
	vec = vec.unit
	local hitObject, hitPos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(startPos + (vec * .01), vec * rayLength), Ignore)
	if hitObject and hitPos then
		local distance = rayLength - (hitPos - startPos).magnitude
		if CheckIntangible(hitObject) and distance &gt; 0 then
			-- there is a chance here for potential infinite recursion
			return CastRay(hitPos, vec, distance)
		end
	end
	return hitObject, hitPos
end

function CreateTrail(pt1, pt2)
	local Path = BasePart:Clone()
	Path.Name = "Effect"
	Path.Transparency = 0.5
	Path.Size = Vector3.new(0.2, 4, (pt2 - pt1).Magnitude)
	Path.CFrame = CFrame.new((pt1 + pt2)/2, pt2)
	Path.Anchored = true
	Path.CanCollide = false
	Path.BrickColor = BrickColor.new("Really red")
	Debris:AddItem(Path, 5)
	Path.Parent = game:GetService("Workspace")
	Spawn(function()
		local start = tick()
		while Path and Path.Parent and (tick() - start) &lt; 2 do
			Path.Transparency = (0.5 + (((tick() - start) / 2)))
			wait()
		end
	end)
	return Path
end

function ClassifySurface(part, point)
	local psize = part.Size
	local localPoint = part.CFrame:pointToObjectSpace(point)
	local posDiff = psize/2 - localPoint
	local negDiff = psize/2 + localPoint
	local minDiff = Vector3.new(
		math.min(math.abs(posDiff.x), math.abs(negDiff.x)),
		math.min(math.abs(posDiff.y), math.abs(negDiff.y)),
		math.min(math.abs(posDiff.z), math.abs(negDiff.z))
	)
	if minDiff.x &lt;= math.min(minDiff.y, minDiff.z) then -- On x-axis
		if math.abs(posDiff.x) &lt; math.abs(negDiff.x) then
			return Enum.NormalId.Right
		else
			return Enum.NormalId.Left
		end
	elseif minDiff.y &lt;= minDiff.z then -- On y-axis
		if math.abs(posDiff.y) &lt; math.abs(negDiff.y) then
			return Enum.NormalId.Top
		else
			return Enum.NormalId.Bottom
		end
	else -- On z-axis
		if math.abs(posDiff.z) &lt; math.abs(negDiff.z) then
			return Enum.NormalId.Back
		else
			return Enum.NormalId.Front
		end
	end
end

function GetTangentVectors(part, point)
	local normalId = ClassifySurface(part, point)
	local normal = Vector3.FromNormalId(normalId)
	local localHitOffset = part.CFrame:pointToObjectSpace(point)
	local tangentVectors = {}
	for i = -1, 1, 2 do
		-- Add three so we can round the corners
		local xVec = Vector3.new(((part.Size.x)/2 + JumpBackDist) * i  - localHitOffset.x,0,0)
		if math.abs(normal:Dot(xVec.unit)) &lt; 0.8 then
			-- To World Space
			table.insert(tangentVectors, (part.CFrame-part.CFrame.p)*(xVec))
		end
		local yVec = Vector3.new(0,((part.Size.y)/2 + JumpBackDist) * i  - localHitOffset.y,0)
		if math.abs(normal:Dot(yVec.unit)) &lt; 0.8 then
			table.insert(tangentVectors, (part.CFrame-part.CFrame.p)*(yVec))
		end
		local zVec = Vector3.new(0,0,((part.Size.z) /2 + JumpBackDist) * i - localHitOffset.z)
		if math.abs(normal:Dot(zVec.unit)) &lt; 0.8 then
			table.insert(tangentVectors, (part.CFrame-part.CFrame.p)*(zVec))
		end
	end
	return tangentVectors
end

function WaypointsRecurse(currPos, desiredPos, wps, depth)
	if (desiredPos - currPos).magnitude &lt; 10 then
		return true
	end
	if depth &lt;= MaxWayPoints then
		local rayDir = desiredPos - currPos
		local hitObj, hitPos = CastRay(currPos, rayDir, math.min(MaxJumpDistance, rayDir.magnitude))
		-- back up JumpBackDist studs for torso
		local directPos = hitPos - (rayDir.unit * JumpBackDist)
		local candidates = {}
		table.insert(candidates, directPos)
		if hitObj then
			local tang = GetTangentVectors(hitObj, hitPos)
			for _, vec in pairs(tang) do
				-- Turn the tangent vector into a translation vector
				local tangVec = (hitPos + vec) - currPos
				local obj, pos = CastRay(currPos, tangVec, math.min(MaxJumpDistance, (tangVec.magnitude)))
				table.insert(candidates, pos)
			end
		else
			local xObj, xPos = CastRay(currPos, Vector3.new(rayDir.x, 0,0), math.min(MaxJumpDistance, math.abs(rayDir.x)))
			local yObj, yPos = CastRay(currPos, Vector3.new(0,rayDir.y, 0), math.min(MaxJumpDistance, math.abs(rayDir.y)))
			local zObj, zPos = CastRay(currPos, Vector3.new(0,0,rayDir.z), math.min(MaxJumpDistance, math.abs(rayDir.z)))

			table.insert(candidates, xPos - (xObj and (xPos - currPos).unit * JumpBackDist or Vector3.new()))
			table.insert(candidates, yPos - (yObj and (yPos - currPos).unit * JumpBackDist or Vector3.new()))
			table.insert(candidates, zPos - (zObj and (zPos - currPos).unit * JumpBackDist or Vector3.new()))
		end
		-- sort by closeness
		table.sort(candidates, function(a,b) return (desiredPos - a).magnitude &lt; (desiredPos - b).magnitude end)
		while candidates[1] do
			local currPoint = table.remove(candidates)
			if WaypointsRecurse(currPoint, desiredPos, wps, depth + 1) then
				table.insert(wps, 1, currPoint)
				return true
			end
		end
	end
	return false
end

function GetClosestTarget()
	local PlayerDistances = {}
	for i, v in pairs(Players:GetPlayers()) do
		if v ~= Player and not IsTeamMate(Player, v) then
			local character = v.Character
			if character then
				local humanoid = character:FindFirstChild("Humanoid")
				local torso = character:FindFirstChild("Torso")
				local DistanceApart = (Torso.Position - torso.Position).Magnitude
				if DistanceApart &lt; 150 and humanoid and humanoid.Health &gt; 0 and torso then
					table.insert(PlayerDistances, {Player = v, DistanceApart = DistanceApart, Humanoid = humanoid, Torso = torso})
				end
			end
		end
	end
	if #PlayerDistances == 0 then
		return
	end
	table.sort(PlayerDistances, (function(a, b)
		return (a.DistanceApart &lt; b.DistanceApart)
	end))
	return PlayerDistances[1]
end

function Charge()
	local player = GetClosestTarget()
	if CheckIfAlive() and ToolEquipped and player then
		local wps = {}
		local success = WaypointsRecurse(Torso.CFrame.p, player.Torso.CFrame.p, wps, 0)
		if success then
			ChargeVelocity = Create("BodyVelocity"){
				Name = "ChargeVelocity",
				velocity = Vector3.new(0, 0, 0),
				maxForce = Vector3.new(0, 0, 0),
				P = 100000000,
			}
			ChargeGyro = Create("BodyGyro"){
			}
			Debris:AddItem(ChargeVelocity, 10)
			Debris:AddItem(ChargeGyro, 10)
			ChargeVelocity.Parent = Torso
			ChargeGyro.Parent = Torso
			local start = tick()
			ChargeVelocity.maxForce = Vector3.new(10000000, 100000, 10000000)
			for i, waypoint in pairs(wps) do
				local PathSuccess = false
				local PathFailed = false
				while CheckIfAlive() and ToolEquipped and not PathSuccess and not PathFailed do
					if (Vector3.new(waypoint.X, Torso.Position.Y, waypoint.Z) - Torso.Position).Magnitude &lt; 5 then
						PathSuccess = true
					elseif (tick() - start) &gt; 2 then
						PathFailed = true
					end
					ChargeVelocity.velocity = ((waypoint - Torso.CFrame.p).Unit * 150)
					wait()
				end
				if PathFailed then
					break
				end
				if CheckIfAlive() and ToolEquipped then
					if i &gt; 1 and PathSuccess then
						local trail = CreateTrail(wps[(i - 1)], wps[i])
						Debris:AddItem(trail, 2)
					end
					if i == #wps then
						local humanoid = player.Humanoid
						UntagHumanoid(humanoid)
						TagHumanoid(humanoid, Player)
						humanoid:TakeDamage(ChargeDamage)
					end
				end
			end
			for i, v in pairs({ChargeVelocity, ChargeGyro}) do
				if v and v.Parent then
					v:Destroy()
				end
			end
			wait(math.max(0, (10 - (tick() - start))))
		end
	end
end

function GrowHorns(MakeNew)
	for i, v in pairs(Tool:GetChildren()) do
		if v:IsA("BasePart") and v ~= Handle then
			v:Destroy()
		end
	end
	if not MakeNew or not CheckIfAlive() or not ToolEquipped then
		return
	end
	Horns = BasePart:Clone()
	Horns.Name = "Horns"
	Horns.Size = Vector3.new(2, 2, 2)
	Horns.CanCollide = false
	Create("SpecialMesh"){
		MeshType = Enum.MeshType.FileMesh,
		MeshId = (BaseUrl .. "138330146"),
		TextureId = (BaseUrl .. "138330253"),
		Scale = Vector3.new(1, 1, 1),
		VertexColor = Vector3.new(1, 1, 1),
		Offset = Vector3.new(0, 0, 0),
		Parent = Horns,
	}
	local Weld = Create("Weld"){
		Part0 = Horns,
		Part1 = Head,
		C0 = CFrame.new(0, -0.6, 1),
		C1 = CFrame.new(0, 0, 0),
		Parent = Horns,
	}
	Horns.Parent = Tool
end

function Activated()
	if not Tool.Enabled or not CheckIfAlive() or not ToolEquipped then
		return
	end
	Tool.Enabled = false
	Charge()
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Head and Head.Parent and Torso and Torso.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Humanoid = Character:FindFirstChild("Humanoid")
	Head = Character:FindFirstChild("Head")
	Torso = Character:FindFirstChild("Torso")
	Player = Players:GetPlayerFromCharacter(Character)
	if not CheckIfAlive() then
		return
	end
	ToolEquipped = true
	Spawn(function()
		GrowHorns(true)
	end)
end

function Unequipped()
	for i, v in pairs({ChargeVelocity, ChargeGyro, Horns}) do
		if v and v.Parent then
			v:Destroy()
		end
	end
	ToolEquipped = false
end

GrowHorns(false)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBXF25D3D71575D4A30B63A182DB7779B13">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null /></Content>
						<string name="Name">MouseIcon</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{37FF1095-C044-4130-814F-0E7CE8C6D1F3}</string>
						<ProtectedString name="Source">--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
					</Properties>
				</Item>
				<Item class="Camera" referent="RBXCEB9EE85C09A41EBB9CCDD3558A869A0">
					<Properties>
						<BinaryString name="AttributesSerialize" />
						<CoordinateFrame name="CFrame">
							<X>2.6620419</X>
							<Y>5.18362188</Y>
							<Z>6.76778698</Z>
							<R00>0.981415331</R00>
							<R01>-0.0782580748</R01>
							<R02>0.175213054</R02>
							<R10>-7.45057971e-09</R10>
							<R11>0.913064241</R11>
							<R12>0.407815844</R12>
							<R20>-0.191895634</R20>
							<R21>-0.400236726</R21>
							<R22>0.896095276</R22>
						</CoordinateFrame>
						<Ref name="CameraSubject">null</Ref>
						<token name="CameraType">0</token>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<float name="FieldOfView">70</float>
						<token name="FieldOfViewMode">0</token>
						<CoordinateFrame name="Focus">
							<X>2.31161571</X>
							<Y>4.36799002</Y>
							<Z>4.97559595</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="HeadLocked">true</bool>
						<float name="HeadScale">1</float>
						<string name="Name">ThumbnailCamera</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags" />
						<bool name="VRTiltAndRollEnabled">false</bool>
					</Properties>
				</Item>
			</Item>
		</Item>
		